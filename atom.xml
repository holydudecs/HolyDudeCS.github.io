<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>中国留学生CS作业代写</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://holydudecs.github.io/"/>
  <updated>2018-10-09T12:48:16.426Z</updated>
  <id>http://holydudecs.github.io/</id>
  
  <author>
    <name>Nameless Coder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS个人代写</title>
    <link href="http://holydudecs.github.io/2045/01/01/Task000000/"/>
    <id>http://holydudecs.github.io/2045/01/01/Task000000/</id>
    <published>2045-01-01T03:05:57.000Z</published>
    <updated>2018-10-09T12:48:16.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍:"></a>个人介绍:</h1><p>本人是国内一名程序员</p><ul><li>毕业于<strong>国内CS专业第一高校</strong></li><li>先后在<strong>Baidu,阿里巴巴任职</strong></li><li>熟练掌握各种语言<strong>C/C++,java,python,matlab,Web</strong></li><li>代写范围从<strong>底层汇编到数据算法结构,人工智能,图像游戏,数据库,Android,IOS,Web</strong></li><li>辅导中国留学生CS作业,多年经验,熟知各科得分点</li><li>由于时间有限,本人不做代考与论文写作</li></ul><h1 id="cs作业代写"><a href="#cs作业代写" class="headerlink" title="cs作业代写:"></a>cs作业代写:</h1><h1 id="cs作业代写价格"><a href="#cs作业代写价格" class="headerlink" title="cs作业代写价格:"></a>cs作业代写价格:</h1><table><thead><tr><th>作业种类</th><th>大一</th><th>大二</th><th>大三</th><th>大四</th><th>硕博</th></tr></thead><tbody><tr><td>Lab</td><td>$30-$100</td><td>$75-$150</td><td>-</td><td>-</td><td>-</td></tr><tr><td>Homework</td><td>$40-$150</td><td>$60-$200</td><td>$100-$220</td><td>$200-$280</td><td>$150-$400</td></tr><tr><td>Assignment</td><td>$50-$150</td><td>$80-$200</td><td>$120-$240</td><td>$160-$280</td><td>$150-$400</td></tr><tr><td>Project</td><td>$100-$150</td><td>$140-$200</td><td>$180-$220</td><td>$200-$280</td><td>$150-$400</td></tr><tr><td>Final</td><td>$100-$200</td><td>$140-$200</td><td>$180-$240</td><td>$220-$280</td><td>$150-$400</td></tr></tbody></table><p>请直接给我留言,睡醒之后会马上回复您.请发送给我您的要求,due,相关文件<br>请加微信联系: <img src="images/wechat.jpeg" alt="WeChat"></p><h1 id="作业反馈"><a href="#作业反馈" class="headerlink" title="作业反馈"></a>作业反馈</h1><a id="more"></a><p><img src="images/pic0.jpeg" alt="WeChat"><br><img src="images/pic1.jpeg" alt="WeChat"><br><img src="images/pic2.jpeg" alt="WeChat"><br><img src="images/pic3.jpeg" alt="WeChat"><br><img src="images/pic4.jpeg" alt="WeChat"><br><img src="images/pic5.jpeg" alt="WeChat"><br><img src="images/pic6.jpeg" alt="WeChat"><br><img src="images/pic7.jpeg" alt="WeChat"><br><img src="images/pic8.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;个人介绍&quot;&gt;&lt;a href=&quot;#个人介绍&quot; class=&quot;headerlink&quot; title=&quot;个人介绍:&quot;&gt;&lt;/a&gt;个人介绍:&lt;/h1&gt;&lt;p&gt;本人是国内一名程序员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;毕业于&lt;strong&gt;国内CS专业第一高校&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;先后在&lt;strong&gt;Baidu,阿里巴巴任职&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;熟练掌握各种语言&lt;strong&gt;C/C++,java,python,matlab,Web&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;代写范围从&lt;strong&gt;底层汇编到数据算法结构,人工智能,图像游戏,数据库,Android,IOS,Web&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;辅导中国留学生CS作业,多年经验,熟知各科得分点&lt;/li&gt;
&lt;li&gt;由于时间有限,本人不做代考与论文写作&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;cs作业代写&quot;&gt;&lt;a href=&quot;#cs作业代写&quot; class=&quot;headerlink&quot; title=&quot;cs作业代写:&quot;&gt;&lt;/a&gt;cs作业代写:&lt;/h1&gt;&lt;h1 id=&quot;cs作业代写价格&quot;&gt;&lt;a href=&quot;#cs作业代写价格&quot; class=&quot;headerlink&quot; title=&quot;cs作业代写价格:&quot;&gt;&lt;/a&gt;cs作业代写价格:&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;作业种类&lt;/th&gt;
&lt;th&gt;大一&lt;/th&gt;
&lt;th&gt;大二&lt;/th&gt;
&lt;th&gt;大三&lt;/th&gt;
&lt;th&gt;大四&lt;/th&gt;
&lt;th&gt;硕博&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lab&lt;/td&gt;
&lt;td&gt;$30-$100&lt;/td&gt;
&lt;td&gt;$75-$150&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Homework&lt;/td&gt;
&lt;td&gt;$40-$150&lt;/td&gt;
&lt;td&gt;$60-$200&lt;/td&gt;
&lt;td&gt;$100-$220&lt;/td&gt;
&lt;td&gt;$200-$280&lt;/td&gt;
&lt;td&gt;$150-$400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assignment&lt;/td&gt;
&lt;td&gt;$50-$150&lt;/td&gt;
&lt;td&gt;$80-$200&lt;/td&gt;
&lt;td&gt;$120-$240&lt;/td&gt;
&lt;td&gt;$160-$280&lt;/td&gt;
&lt;td&gt;$150-$400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Project&lt;/td&gt;
&lt;td&gt;$100-$150&lt;/td&gt;
&lt;td&gt;$140-$200&lt;/td&gt;
&lt;td&gt;$180-$220&lt;/td&gt;
&lt;td&gt;$200-$280&lt;/td&gt;
&lt;td&gt;$150-$400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Final&lt;/td&gt;
&lt;td&gt;$100-$200&lt;/td&gt;
&lt;td&gt;$140-$200&lt;/td&gt;
&lt;td&gt;$180-$240&lt;/td&gt;
&lt;td&gt;$220-$280&lt;/td&gt;
&lt;td&gt;$150-$400&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;请直接给我留言,睡醒之后会马上回复您.请发送给我您的要求,due,相关文件&lt;br&gt;请加微信联系: &lt;img src=&quot;images/wechat.jpeg&quot; alt=&quot;WeChat&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;作业反馈&quot;&gt;&lt;a href=&quot;#作业反馈&quot; class=&quot;headerlink&quot; title=&quot;作业反馈&quot;&gt;&lt;/a&gt;作业反馈&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c/c++代写:多线程编程</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000074/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000074/</id>
    <published>2018-11-04T13:09:36.000Z</published>
    <updated>2018-11-04T13:10:18.391Z</updated>
    
    <content type="html"><![CDATA[<p>悉如何使用Pthreads的API,撰寫multithreaded program。<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>c/c++代写:多线程编程<br>CS305 作業系統概論 Homework #2 Multithreading</p><p>2018.04.18<br>一、 作業目的<br>熟悉如何使用Pthreads的API,撰寫multithreaded program。</p><p>二、 作業內容<br>【大數據中的關鍵文件】為了要在許多文件中找出關鍵文件,L公司想要來利用電腦科技來達成目標。<br>對L公司而言,在一個有M個文件的文件集合D={d 1 ,d 2 ,…,d M }中,關鍵文件d k 就是與其他文件的相似度總<br>和最高的文件。但對於如何快速計算文件的相似度,L公司卻毫無頭緒。<br>於是L公司來到風之塔學院尋求幫助。對於這個大數據問題,風之塔學院的C教授帶著他的高徒開發這個<br>程式。C教授決定先使用傑卡德相似係數(Jaccard similarity coefficient)的方法來計算,找出關鍵文件。傑<br>卡德相似係數的公式如下,在兩個集合 A 與 B 中,兩個集合A和B的交集元素個數在A,B的聯集元素個<br>數中所佔的比例,就是它們的傑卡德相似係數:<br>J ( A , B ) = | A ∩ B |/ | A ∪ B |<br>因此如果對下面兩個文件</p><p>d 1 = “this is a book” d 2 = “this is a pen” J(d 1, d 2 )=3/5=0.6 </p><p>C教授同時要用multithreaded programming 的方式來設計程式。每一份文件對其他M-1份文件的平均傑卡<br>德相似係數(Average J(d 1, d 2 ))是由一個單獨的thread 來計算出來。所有文件會放在一個檔案中,程式須由<br>命令列讀入檔名。檔案中最多會有50個文件。每個文件會有兩行資料,第一行是文件的ID,第二行是文<br>件內容。文件ID會是一個字串,文件內容中的字詞會由一個或多個空白隔開。傑卡德相似係數如果有多<br>位小數,需要至少精準到小數點後5位。在處理文件時,依照下面規則處理:</p><p>只考慮純字母組成的詞。<br>如果有重複出現的詞,只計算一次。例如: “a good book is a book” 中, “book”只算出現一次。<br>在程式執行時,<br>主執行緒針對文件數量產生對應的子執行緒。例如有4份文件,就產生4個子執行緒。主執行緒並負<br>責印出來下列事項,印出內容時,每一行需要印出 “[Main thread]”:<br>a. 每一個子執行緒的 tid,以及所負責計算的主文件ID。<br>b. 具有最高平均傑卡德相似係數的文件ID及文件內容。<br>c. 整個程式會用多少CPU時間 (以ms為單位)。<br>子執行緒則負責計算傑卡德相似係數。執行過程中,要列印出本身的動作,並且每一行都要印出自<br>己的thread id 。以下是需要印出的項目:<br>a. 負責計算的主文件ID編號。<br>b. 子執行緒計算傑卡德相似係數時,要印出是哪兩個文件在計算,以及它們Jaccard similarity。<br>c. 最後的平均傑卡德相似係數。<br>d. 子執行緒執行會用多少CPU時間 (以ms為單位)。<br>以下是一個可能的執行過程:<br>prog2 data.txt</p><p>[Main thread]: create TID:123, DocID:0001 [TID=123] DocID:0001 [TID=123] J(0001,0002)=0.6 [TID=123] J(0001,0003)=0.6 … [TID=123] AvgJ:0.511 [TID=123] CPU time: 20ms … [Main thread] KeyDocID:0003 HighestJ:0.9999 [Main thread] CPU time: 2000ms<br>二、 作業要點<br>請注意,本作業使用的程式語言是C/C++,測試平台的作業系統: Ubuntu 17.10 LTS 64-bit。使用的<br>編譯程式為gcc/g++ 編譯器:7.2。其他平台或程式語言不在本次作業考慮範圍之內。如在測試平台上<br>無法編譯與執行,都不予給分。<br>請注意,本作業一定要用Pthread API來進行。任何不用Pthread API的程式,都不予給分。<br>本作業的評分方式如下:<br>a. 每一個項目能正確執行時,最多可得的分數如下<br>i. 從命令列讀入檔名參數,20分。<br>ii. 能產生 pthread,10分。<br>iii. 子執行緒可以印出本身的tid,20分。<br>iv. 傑卡德相似係數計算。不可以使用任何套件或函式庫,需自己完成。20分。<br>v.<br>印出執行所用的CPU時間,20分。<br>vi. 主執行緒找出關鍵文件並印出它的平均傑卡德相似係數,20分。<br>本作業需繳交檔案:<br>a. 說明報告:檔案為docx或pdf格式。<br>i. 報告中必須說明程式的設計理念、程式如何編譯,以及如何操作。<br>ii. 報告中同時必須詳細說明你完成哪些部份。如有用到特殊程式庫,請務必說明。<br>iii. 請務必讓助教明白如何編譯及測試你的程式。助教如果無法編譯或測試,會寄信(最多兩<br>次)通知你來說明,但每說明一次,助教會少給你10分。<br>b. 完整原始程式碼檔案。程式碼檔案必須是可直接編譯的檔案。不可含執行檔。助教會重新編譯你<br>們的程式。<br>所有相關檔案,例如報告檔、程式檔、參考資料等,請壓縮成一個壓縮檔(不可超過2MB)後上傳<br>至portal。請注意,不可抄襲。助教不會區分何者為原始版本,被判定抄襲者,一律0分。<br>如果傑卡德相似係數計算有使用網路範例,務必在作業中說明。該部份將不會計分,但不會判定為<br>抄襲。<br>三、 繳交方式:<br>最終繳交時間:<br>a. 電子檔在 2018.05.11 以前,上傳至個人portal。如有多個檔案,將所有檔案壓縮成zip(rar 亦可)格<br>式,然後上傳。<br>b. 上傳檔名格式:「學號作業號碼.docx」或「學號作業號碼.rar」。例如:912233_01.doc 或<br>912233_01.rar。<br>如有違規事項者,依照課程規定處理。<br>如需請假,請上portal請假,並持相關證明文件,在請假結束後的第一次上課時完成請假手續,並在<br>一週內完成補交。補交作業將以8折計算。<br>老師不接受「門縫」方式繳交,助教也不接受任何作業。<br>四、 如有未盡事宜,將在學校portal板面公告通知。<br>五、 If you need any assistance in English, please contact Prof. Yang.<br>六、 參考資料<br>參考課本圖 4.9。<br>PThread: <a href="https://computing.llnl.gov/tutorials/pthreads/" target="_blank" rel="noopener">https://computing.llnl.gov/tutorials/pthreads/</a><br>POSIX 線 程 (pthread) 入 門 文 章 分 享 : <a href="http://dragonspring.pixnet.net/blog/post/32963482-" target="_blank" rel="noopener">http://dragonspring.pixnet.net/blog/post/32963482-</a><br>posix%E7%B7%9A%E7%A8%8B%28pthread%29%E5%85%A5%E9%96%80%E6%96%87%E7%AB%A<br>0%E5%88%86%E4%BA%AB<br>Jaccard index wiki: <a href="https://en.wikipedia.org/wiki/Jaccard_inde" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Jaccard_inde</a></p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;悉如何使用Pthreads的API,撰寫multithreaded program。&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>c++作业算法实现</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000073/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000073/</id>
    <published>2018-11-04T13:09:04.000Z</published>
    <updated>2018-11-04T13:09:28.610Z</updated>
    
    <content type="html"><![CDATA[<p>You have to implement what you have learned in CMPSC 360 to solve a practical problem of<br>your choice. The goal of the project is to help you in understanding the importance of the<br>concepts you are learning inside the classroom. Since the homework, recitations and other<br>quizzes are limited in scope this project will help you in understanding the practicality of discrete<br>mathematics with an interesting open-ended problem. You will also gain a very important skill of<br>carrying out research and communicating your findings in writing. Plus, it would really look cool<br>on your resume.<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写<br>CMPSC 360: Discrete Mathematics for Computer Science<br>Spring 2018 Project April 3, 2018<br>Project Overview<br>You have to implement what you have learned in CMPSC 360 to solve a practical problem of<br>your choice. The goal of the project is to help you in understanding the importance of the<br>concepts you are learning inside the classroom. Since the homework, recitations and other<br>quizzes are limited in scope this project will help you in understanding the practicality of discrete<br>mathematics with an interesting open-ended problem. You will also gain a very important skill of<br>carrying out research and communicating your findings in writing. Plus, it would really look cool<br>on your resume.</p><p>Important Dates<br>The due date for submitting a proposal 7th April 2018 11:00 pm<br>The due date for submitting final project report and code: 24th April 2018 11:00 pm</p><p>Scope<br>The main requirement for this project is to demonstrate the ability to demonstrate that you<br>understand the CMPSC 30 concepts and their practical importance.<br>You can work in teams of maximum two students but remember that more the number of people<br>in team more the work should be in the project. We recommend working by yourself.</p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You have to implement what you have learned in CMPSC 360 to solve a practical problem of&lt;br&gt;your choice. The goal of the project is to help you in understanding the importance of the&lt;br&gt;concepts you are learning inside the classroom. Since the homework, recitations and other&lt;br&gt;quizzes are limited in scope this project will help you in understanding the practicality of discrete&lt;br&gt;mathematics with an interesting open-ended problem. You will also gain a very important skill of&lt;br&gt;carrying out research and communicating your findings in writing. Plus, it would really look cool&lt;br&gt;on your resume.&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>汇编 操作系统</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000072/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000072/</id>
    <published>2018-11-04T13:08:39.000Z</published>
    <updated>2018-11-04T13:08:59.870Z</updated>
    
    <content type="html"><![CDATA[<p> Machine details and background concepts This section explains background concepts, the components of the hypothetical Commqual architecture, and its instructions. The following section describes the functions you are to write.<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><ol><li>Machine details and background concepts This section explains background concepts, the components of the hypothetical Commqual architecture, and its instructions. The following section describes the functions you are to write. 1.1 Hardware concepts A program written in any computer language is ultimately executed on a particular machine using the basic instructions that its processor provides. Instructions manipulate information in memory and also in the processor’s registers. In modern systems, memory is used to hold data, such as variables, and programs themselves are also stored in memory. Registers are locations that can store values just like memory except they are internal to the CPU, so they are accessed much more quickly. Registers temporarily store values that instructions operate upon, as well as the results of instructions. The fundamental operation of any CPU is to read an instruction from memory, figure out what it says to do, perform that operation, and go on to read the next instruction; this is called the fetch– decode–execute cycle. (This is discussed in much more detail in the Bryant &amp; O’Hallaron text, which is on reserve in McKeldin Library if you want or need more information.) Although the instruction sets of different processors vary widely, many instructions can be categorized by functionality: computation instructions: These are instructions performing various arithmetic and logical operations. data movement instructions: These are instructions for transferring data values between memory and registers, between different registers, and sometimes between different memory locations. flow of control instructions: These are instructions that affect which instruction will be executed next, for implementing conditionals and iteration, as well as function calls. invoking the operating system: Some instructions perform system calls, meaning they call functionality in the operating system to perform tasks like terminating the calling program, or doing input or output. 1.2 Machine specifications The Commqual’s processor has a 32–bit (4 byte) word length, which means that instructions, registers and memory words are all 32 bits. (As explained in lecture, processors manipulate information in multibyte quantities called words.) As mentioned, our hypothetical machine is extremely small, and it only has 4K bytes of memory. More precisely, it has 4096 bytes, or 1024 (4096 / 4) four–byte words. The first byte of memory has address 0. Memory addresses are always given in bytes, but memory is only word–addressable, meaning that the processor can only manipulate data in four–byte quantities, using the memory address of the first (or low– order) byte of a four–byte word. Consequently the memory addresses that refer to instructions or data are 0, 4, 8, etc. The Commqual processor has 18 different hardware instructions that perform different operations. In memory there’s no difference between instructions and data– memory words contain numbers, which can be interpreted as instructions and executed, or that can be treated as data. The Commqual has 12 registers, each of which as mentioned is 32 bits. These are referred to using the names R0 through R11. The Commqual has what is called a load/store architecture, which means that the only instructions that access memory are some of the data movement instructions, which copy or load a value from a memory location into a register, or store a value from a register into memory. All other instructions, including computations, operate upon values in registers and put their result into a register. So computation usually involves loading operands from memory into registers, doing computation on them, and storing the results from registers back into memory. One of the Commqual’s 12 registers has a special purpose. Register R0 (the first register) is the program counter, which always contains the memory address of the next instruction to be fetched and executed. A flow of control instruction has the effect of modifying the program counter’s value, while all other instructions cause the program counter to be incremented, so unless a flow of control instruction is executed the default behavior of the processor is to execute instructions sequentially in memory. Although all of the instructions cause the program counter’s value to be modified one way or the other, it’s an error for instructions to attempt to directly change the contents of R0. For example, it is invalid for a program to try to store the result of a computation in the program counter, since the CPU would then lose the address of the next instruction to be executed. The remaining registers may be read from or written to by the various instructions. 1.3 Hardware, components of instructions, and instruction format Since the Commqual’s processor has a 32–bit word length, all instructions, just like all data, must fit into a 32– bit word. None of the instructions use all 32 bits of their word; different instructions use between 12 bits and 22 bits. Note though that not every 32–bit word represents a valid instruction, as described below. Different types of instructions have operands that they operate upon, which are encoded as part of the instruction, meaning that they are included in the instruction word. Therefore the 32 bits of a memory word or register are considered to have different fields when interpreted as an instruction, and the fields are used to represent (a) which instruction the word or register contains, (b) up to three registers that are used as operands of some instructions, (c) an extension, whose use will be described below, and (d) either a memory address or constant numeric value that are used as operands by some instructions. The instruction format on the Commqual processor is as follows (the fields are explained below), although note that, as described below, one instruction is an exception to this diagram: 5 bits 4 bits 4 bits 4 bits 3 bits 12 bits opcode register1 register2 register3 extension memory address or immediate operand The fields have the following uses and functionality: opcode: An opcode uniquely identifies the operation that an instruction performs. Short names are used in assembly language to refer to each instruction. Since the Commqual has 18 different instructions, 5 bits are required to represent an opcode. For example, the value 1 in this field indicates an add instruction. (The instructions themselves are briefly described in the next subsection.) Note that some values that could be in the opcode field don’t represent valid instructions, since 32 different values can be stored in 5 bits, but the Commqual only has 18 instructions. (But 18 different possibilities cannot be represented using only 4 bits, so 5 bits are needed for the opcode field.) register1, register2, register3: As described in Section 2.4, some instructions operate upon the contents of one register, others operate on two registers, and some have three register operands. These three fields contain numbers that are used to indicate the registers that instructions use as operands. Since the Commqual processor has 12 registers, 4 bits can indicate any of them. Note that some values that could be in the register fields don’t represent valid registers, since 16 different values can be stored in 4 bits, but the Commqual only has 12 registers. extension: Two instructions on the Commqual have several variants each, which work in different but related ways. For these instructions, a value in the extension field is used to indicate which variant an instruction represents. Not all values that can be stored in 3 bits represent valid extensions either. memory address or constant: Some of the Commqual’s instructions have the address of a memory location as an operand. For example, an instruction could indicate that the contents of memory location 216 should be stored in one of the registers, and the value 216 would be the contents of this field of the instruction. One instruction has a constant or literal value (typically called an immediate in assembly language) as an operand. For example, an instruction could indicate that the numeric value 216 should be stored in one of the registers, and the value 216 would be encoded in the instruction. Instructions that use a memory address (see the table in Section 2.4 below) just use the 12–bit memory address field to store the address of the memory location that the instruction operates upon. (Since the Commqual only has 4096 bytes of memory, and 4096 = 212, 12 bits is sufficient to represent any valid address on the machine.) But the li instruction, that contains a numeric constant or immediate, uses the rightmost 15 bits of the instruction word (the contents of the memory address field and the extension 15 field) to store the immediate, so immediate values can be between 0 and 2 − 1 = 32767. (Therefore the li instruction is the exception to the diagram of the instruction format given in Section 2.3.) As mentioned, not all fields are used by instructions, and unused fields may just contain any bits at all. For example, say an instruction has opcode value 6, and it’s one of the instructions that uses all three register operands, and suppose this particular instruction is going to operate upon registers R3, R4, and R1. Also suppose this instruction doesn’t have a memory address or immediate as an operand and it doesn’t use the extension field, and it just contains 0s in the bits of the extension field. Then this instruction would be stored in a 32–bit memory word as 0x31a0800016 , which is 83260211210 (suggestion– convert the hexadecimal value to binary to see what the bits are in the instruction). As another example, suppose another instruction © 2018 L. Herman/P. Sadeghian; all rights reserved 3 has opcode value 16 and uses one register operand, which in this case is R11, does not use the extension field, and has the memory address 21610 If it also had 0s in all of the unused fields it would be stored in a memory word as 0x858000d816 (which is 223975855210). 1.4 Names, operands, and effects of the machine instructions Although you need to know something about the Commqual hardware instructions in order to write the project, you mostly don’t need to know what they do in detail, so after the number and the type of the operands used by each instruction are given in a summary table, their effects are summarized just briefly. Each instruction is listed with the (decimal) number between 0 and 17 that represents its opcode. opcode value (decimal) register1 register2 register3 extension memory address/immediate sys 0 ✓ ✓ add 1 ✓ ✓ ✓ sub 2 ✓ ✓ ✓ mul 3 ✓ ✓ ✓ div 4 ✓ ✓ ✓ rem 5 ✓ ✓ ✓ shl 6 ✓ ✓ ✓ shr 7 ✓ ✓ ✓ neg 8 ✓ ✓ cm p 9 ✓ ✓ ✓ br 10 ✓ and 11 ✓ ✓ ✓ or 12 ✓ ✓ ✓ The sys instruction is used to invoke certain operating system routines from a program. Since it’s one of the two instructions which uses the extension field mentioned above, it will be described in the following subsection. add adds the contents of register2 and register3, and stores the result in register1. Similarly, sub does subtraction, mul does multiplication, div does division, rem does remainder, shl shifts a value to the left and shr shifts it to the right. For instance, the instruction mul R10 R3 R7 multiplies the contents of registers R3 and R7, and stores the result in register R10. And sub R4 R5 R2 subtracts the content of R2 from the content of R5, and stores the result into R4. neg negates the value of its second register operand and stores the result in its first register operand, for example, if register R3 had 216, neg R2 R3 would store −216 in R2. The cmp instruction performs a comparison. Since it is the other instruction that uses the extension field it is also described in the next subsection. Because br is related to it it is also described there. and performs logical conjunction, or performs logical disjunction, and not does logical negation. li loads a constant or literal value (li stands for load immediate) into a register. For instance, the instruction li R4 234 would have the effect of loading the numeric value 234 (not the contents of memory location 234) into register number R4. (Assuming 234 is in decimal, this instruction would be stored in a word or register as 0x720000ea16, which is 191260285810.) lw and sw are the only instructions that use or affect the contents of memory locations. lw (load word) moves a value from a memory location to a register. It uses the first register operand and a memory address, and its effect is to copy the contents of the indicated memory address into the register specified by the register operand. For example, lw R11 200 would load the value that is in memory location 200 into register number R11. (Assuming 200 is in decimal, this instruction would be stored in a register or memory word as 0x7d8000c816, which is 210554080810.) sw (store word) does the opposite, copying a value from a register to the memory location. Lastly, mov copies its second register operand’s value to its first register operand. not 13 ✓ ✓ li 14 ✓ ✓ lw 15 ✓ ✓ sw 16 ✓ ✓ mo v 17 ✓ ✓ Note that all of the instructions are computation instructions except li, lw, sw, and mov are data movement instructions, cmp and br are data movement instructions, and sys is for invoking the operating system. Note that the same register may be used for multiple operands in instructions that operate upon two or three registers, for example add R1 R2 R1, or even add R3 R3 R3. Any operands that aren’t indicated in the table above are not applicable for that instruction. For example, mov has two register operands, therefore they will be contained in the first two register fields register1 and register2, and neither the third register field register3, nor the extension or the address or immediate field will be used by a mov instruction. Also note that the only instructions that use the memory address or immediate field for storing a memory address (as opposed to an immediate operand) are lw, sw, and br. 1.4.1 The sys, cmp, and br instructions Since these two instructions that use the extension field have several variants each they are described here. Recall that sys instruction makes a system call, meaning it allows an assembly program to invoke code in the operating system to perform some task. The sys instruction has three variants, depending upon what value is in the instruction’s extension field: • If the extension field contains the value 0, this form of the instruction has no other operands; its effect is to cause the operating system to stop the program when it is executed. • If the extension field contains 1, this form of the instruction has one register operand, and has the effect of printing to the output the value in the register specified by the operand. • If the extension field has 2, this form of the instruction also has one register operand, and has the effect of reading an integer value from the input and storing it into the register specified by the operand. The cmp instruction has two register operands and it compares the values in the registers indicated by the operands in one of six ways, setting a “condition code flag” internal to the CPU if the condition is true (otherwise it clears the flag). If the extension field has the value 0 the values in the two registers are compared for equality (e.g., ==), if the extension has the value 1 the values in registers register1 and register2 are compared using !=, the extension 2 compares the values using &lt;, the extension 3 compares the values using &lt;=, the extension 4 compares the values using &gt;, and the extension 5 value compares the values using &gt;=. The condition code flag can be used by the br (branch) instruction, whose only operand is a memory address in the memory address field. It stores the address into the program counter register R0 if the condition code flag is set, and otherwise has no effect. Consequently it can be used by a program to jump to some other location and start executing instructions there, instead of just executing the sequentially next instruction. 2 Functions to be written The header file machine.h contains the prototypes of the four functions described below that you are to write, as well as some other definitions. The functions use a typedef name Machine_word, which is an unsigned int value, to represent a Commqual word (e.g., machine instruction or register content), since on the Grace machines an int is four bytes. 2.1 int assemble(unsigned short opcode, unsigned short reg1, unsigned short reg2, unsigned short reg3, unsigned short extension, unsigned int addr_constant, Machine_word *const word) An assembler converts assembly language to machine language; this function is very roughly analogous. Its input is not assembly language; instead it converts the values of individual variables (its first six parameters) representing the components of a Commqual instruction into Commqual machine language (a Memory_word). If its parameters are valid it should encode its first six parameters as the 32–bit word of a Commqual instruction, and store the result into the Machine_word that its seventh (pointer) parameter points to. The function will have to use the bitwise operators to place the parameters’ values in the correct bits of the Machine_word that word points to. For example, if opcode has the value 5 (representing rem), the high order (leftmost) five bits of the Machine_word that word1 points to will become 00101. Any fields that are not used by hardware instructions must have their bits set to 0 by the function. Even though unused fields of hardware instructions are ignored by the Commqual’s processor, this will allow our tests to expect definite values when checking your function’s results. For example, in a lw instruction the eleventh through twenty– third bits (counting from the least significant bit, meaning the extension field and the second and third register operands) must be 0, regardless of the values of the values of the parameters reg2, reg3, or extension, because those fields are not used by a lw instruction. The only exception: if the value of the parameter opcode is LI (with decimal value 14), the value of addr_constant should be used to fill the rightmost 15 bits of the result (because the li instruction uses the rightmost 15 bits for its immediate operand), and the value of the parameter extension is not used. For any other value of opcode, extension’s value should be used to fill the 13th through 15 bits of the result (counting from the right, meaning the extension field). If its pointer parameter word is NULL the function should just return 0 without changing anything at all. Otherwise it should store the encoded hardware instruction into the Machine_word that word points to and return 1. Other than checking whether word is NULL, note there are no other error conditions the function has to check for. If the caller passes invalid argument values into the parameters (e.g., an opcode of 20, or a register number of 100), the result in word is allowed to be invalid in any way at all. This would be the caller’s fault for being foolish enough to pass in invalid values, rather than the function’s responsibility to detect. If word is non–NULL the function just has to assume that it points to a valid Machine_word (unsigned int), because in C there is no way for a function to check this; it is the caller’s responsibility to ensure it. 2.2 int print_instruction(Machine_word instruction) This function is passed a Machine_word, which as mentioned can be used to represent the contents of either a memory location or a register. It should interpret its parameter as a hardware instruction. If the instruction is not valid according to the criteria described in Section 3.4 the function should not print anything at all and just return 0. If the instruction is valid it should return 1 after printing instruction’s components on a single output line, in this format: • The instruction’s opcode (the opcode field of its parameter, meaning its leftmost 5 bits) should be printed using its name in the table in Section 2.4 (sys, add, sub, mul, etc.), spelled exactly as shown there. If the value of the opcode field is the enum SYS (which has the value 0), then sys should be printed. If the opcode field is ADD then add should be printed, etc. • Following the opcode, the extension and register operands that are actually used by that instruction should be printed, in that order (the extension followed by the register operands, in order). For example, a neg instruction uses the first two registers as operands, so they should be printed, in that order. A cmp instruction uses the first two registers and the extension as operands so the extension should be printed first, then the two register operands. Register names should be printed in decimal with a preceding R; no space should separate the R from the following register number. For example, register 0 would be printed as R0, register 1 would be printed as R1, etc. For instructions that use it, the extension should just be printed as a single decimal digit between 0 and 5. • If a hardware instruction is one that uses a memory address or immediate (the li instruction) it should be printed last, in decimal notation. If it is a memory address it should be printed using exactly five places, with addresses that are less than 1000010 printed using as many leading zeros as necessary to print the address using exactly five places. For example, the memory address 21610 would be printed as 00216. (This formatting can trivially be performed in C with the right printf() formatting options, discussed in class.) Note that immediates that are operands of the li instruction should not be printed with any leading zeros, except the immediate value zero itself should be printed as 0. Only memory address operands may have leading 0s. The printed fields must be separated with one or more whitespace characters (meaning tabs or blank spaces); the exact amount of whitespace is up to you. The printed instruction should not have any whitespace before the opcode or following the last field printed. It should not print a newline after the instruction. Note: in projects where output has to be produced, students sometimes lose credit for minor misspellings or formatting mistakes. The submit server checks your output automatically, consequently even trivial mis- spellings would cause your output to be incorrect. Due to the size of the course we will not be able to give back any credit lost for failed tests due to spelling or formatting errors, even though they are minor, because that would necessitate manual checking of 601 students’ outputs (for multiple tests each), which is impossible. Therefore it will be essential for you to check carefully that your output is correct, that register names and opcodes are spelled exactly, and that the output format described above is followed. 2.3 int disassemble(const Machine_word program[], unsigned int program_size, unsigned int data_segment_size) A disassembler converts machine language to assembly language. This function will do that by applying print_instruction() to an array containing instructions. Its first parameter is an array of words representing a program (consisting of a series of instructions possibly followed by some data) and its second parameter is the number of elements in the array that are being used. The memory for a program is divided up into different sections. The code segment is where the program’s executable instructions are stored, while the data segment is where the program’s data (variables) are stored. One or more of the program array’s elements will be considered to represent the code segment (a valid program on the Commqual must have at least one executable instruction). The function’s third parameter gives the number of elements at the end of the array that are considered to be the data segment. All the elements before that represent the code segment. For example, if the second parameter’s value was 10 and the third parameter’s value was 3 this indicates that the array has 10 elements, of which the first 7 are to be interpreted as instructions and the last 3 are to be interpreted as data.</li></ol><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Machine details and background concepts This section explains background concepts, the components of the hypothetical Commqual architecture, and its instructions. The following section describes the functions you are to write.&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>高级Makefile编写</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000071/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000071/</id>
    <published>2018-11-04T13:08:12.000Z</published>
    <updated>2018-11-04T13:08:34.202Z</updated>
    
    <content type="html"><![CDATA[<p>Makefile to be written • In the project7 directory you must write a makefile, which must be in a file named Makefile (with an uppercase ‘M’), that will build three executable programs program1.x, main.x, and tester.x (so it must have these three targets) from the three files program1.c, main.c, and tester.c and the other source files.<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>Makefile to be written • In the project7 directory you must write a makefile, which must be in a file named Makefile (with an uppercase ‘M’), that will build three executable programs program1.x, main.x, and tester.x (so it must have these three targets) from the three files program1.c, main.c, and tester.c and the other source files. By looking at what functions the main programs are calling, you should be able to see what object files have to be linked together to form each executable. By looking at the source files, you should be able to see what files have to depend on what other files in your makefile. • Your Makefile must also have a target all, which will build all three executable programs program1.x, main.x, and tester.x. It should be the first target, so either running just make, or make all, will build all three programs. • Note that an example makefile from lecture illustrated the correct way an all target should be written. • Your Makefile must use the six gcc compilation options -ansi, -pedantic-errors, -Wall, -Werror, -fstack-protector, and lastly -Wshadow, which were mentioned in the first project, to build object files. (But it should not use these options to create executable files.) • When we say that these options must be used it does not mean that all six of them have to be explicitly repeated in every invocation of gcc in your makefile; it can be done via a makefile macro, as long as the options are added to every command that is compiling a source file. (The reason the compilation options must be explicitly used in a makefile, even though they are enforced when you compile code on Grace via running gcc by hand, is as follows. The way that the compilation options are enforced when compiling code manually is via an alias for gcc that is added as a result of the account setup steps you made early in the semester. However, a makefile does not recognize shell aliases.) 2 • Your makefile must use separate compilation– each source file (e.g., fill-array.c) needed to form each of the three executable programs must be separately compiled, then the independent object files linkedtogether, to form the executable. (So your Makefile must also have additional targets for all object files. Note that there are six source files, so six object files should be created by your makefile.) • Your Makefile should not explicitly compile header files. • Your Makefile must also have a target named clean that will delete all of the compiler–generated files(the object and executable files) that are created by the compilation commands in your makefile. There are ten public tests for this project (and no secret tests). The actual tests are written in languages most students don’t know so they would be confusing, and not at all necessary to understand, in order to be able to write your Makefile, so we haven’t given you the actual tests. Instead we just describe here what they are testing, and below we explain how to test (before submitting) whether your Makefile passes the tests. 1. The first test tests whether your Makefile correctly builds main.x. 2. The second test tests whether your Makefile correctly builds program1.x. 3. The third test tests whether your Makefile correctly builds tester.x. 4. The fourth test tests whether your Makefile’s all target works and is in the correct place in your Makefile. 5. The fifth test tests whether your Makefile is using separate compilation everywhere. 6. The sixth test tests whether your Makefile is explicitly compiling header files, which should not be done. 7. The seventh test tests whether your Makefile’s clean target removes all compilergenerated (executable and object) files. 8. The eighth test tests whether your Makefile has any missing dependencies. 9. The ninth test tests whether your Makefile has any extra unnecessary dependencies. 3 10. The tenth test tests whether your Makefile is using the required compilation options for creating all object files. Note that there are some “stylistic” properties that may be checked manually in later projects where you have to write makefiles that the tests do not test for, for example whether your makefile has extra unnecessary dependencies, or is missing dependencies that it should have. There are also no output files for the tests. You will know that your makefile is correct if you can run the three commands make program1.x, make main.x, and make tester.x, and the three executable programs with those names are created (and if your makefile is following the requirements discussed above and below).     </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Makefile to be written • In the project7 directory you must write a makefile, which must be in a file named Makefile (with an uppercase ‘M’), that will build three executable programs program1.x, main.x, and tester.x (so it must have these three targets) from the three files program1.c, main.c, and tester.c and the other source files.&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>编写Priority Queuey使用老师给的框架，编写Makefile</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000070/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000070/</id>
    <published>2018-11-04T13:07:51.000Z</published>
    <updated>2018-11-04T13:08:08.878Z</updated>
    
    <content type="html"><![CDATA[<p>.Object This project will extend upon your priority queue implementation from Project #6. You will now do some smaller things: add conditional compilation directives to your header file pq-datastructure.h and add one short new function to your priority queue implementation, and some larger things<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>1.Object This project will extend upon your priority queue implementation from Project #6. You will now do some smaller things: add conditional compilation directives to your header file pq-datastructure.h and add one short new function to your priority queue implementation, and some larger things, including writing a makefile that will compile your code for all of the public tests and writing a program that does black–box testing of priority queue implementations that we created. Many of the secret tests will check your testing program. Lastly, you will need to fix any bugs in your priority queue implementation (including those that may be in your check_string_arrays() function). Even if you had trouble with Project #6 and may get a low score you can still do fine in the course (one project just isn’t worth much toward your grade). You do have to get Project #6 to work though, so you can expand on it in this project. If you have bugs in your Project #6 code, fix them as soon as possible. Come to the TAs’ office hours if you need help. The data structure requirements and other restrictions and requirements for priority queues and for your implementation remain the same as they were in Project #6, so review that project if necessary again. Before asking for any debugging help in the TAs’ office hours, you must know how to use gdb and have already used gdb to throughly debug your code. Otherwise the TAs will not help debug your code. Note that you have to have three source files in your project, one header file, and one makefile. These are described specifically in Appendix A.1. That appendix also says exactly what should be written in each file and what each file should include. If you don’t read this appendix carefully your code may not even compile when submitted. Also note that– as Project #3, Project #4, Project #5, and Project #6 also said in their project require- ments sections (that many students seem to have skipped)– unless your files contain versions of all required functions that will at least compile, your program will fail to compile at all on the submit server. (As those projects all suggested, create skeleton versions of all functions when starting to code, that just have an appropriate return statement, so things will at least compile on the submit server. Do this for all required functions in all required files you have to create, described in more detail in Appendix A.1.) Due to the size of the course it is not feasible to provide information or assistance regarding programming assignments via email. You are welcome to ask any questions about this project in person, either during office hours, or during, before, or after discussion section or lecture (if time permits), but they will not be answered if asked via email. 2 First tasks Now that the preprocessor has been covered, including the conditional directives that are actually always used in C header files, you should add correct conditional compilation directives to your pq-datastructure.h header file. (This will take almost no time at all.) The next task is not hard to explain, but it may take a fair amount of work to accomplish; it is to fix bugs in your priority queue functions from Project #6. In the real world programs do not get thrown away or ignored after the date they are supposed to be finished; they commonly continue to be used and modified as needs change, or as bugs are later found. Although students often never look at academic programming projects again after submitting them, if you want to do well on this project you will not only have to look at your Project #6 code again, you will have to figure out any mistakes you made in it and fix them. Note that all of the public tests for this project, except for the last one, are the secret tests from Project #6 that have just been renamed. 3 The new function char *peek(Priority_queue pq) This function should return a newly–created dynamically–allocated string (meaning a deep copy) of the element in its parameter pq that has the highest priority, without removing it from the queue. The number of elements being stored in the queue pq will remain the same. But if pq is currently empty the function should just return NULL instead. 4 Compiling using the make utility You must write and submit a makefile along with your project code. This makefile will be used to compile your code for all the public tests, so it should have a rule for each public test present in the project tarfile. Since you won’t know how many secret tests there are, or what their dependencies should be, We will use our own makefile to compile them. The requirements for your makefile are: • It must be in a file named Makefile (with a capital first letter). (Your code will not compile on the submit server if your makefile name is wrong.) • It must use the six gcc options -ansi, -pedantic-errors, -Wall, -fstack-protector-all, -Werror, and -Wshadow, which were mentioned in the first project, to build object files. (But do not use these options to create executable files.) You may optionally add the -g option, to be able to run gdb and valgrind (memcheck) on your code, and your submitted makefile may contain -g with the other options. • Your Makefile must contain the following targets: all: This target must appear first and must create executables for all the public tests. pq.o: This target must create the object file for pq.c. check-string-arrays.o: This target must create the object file for check-stringarrays.c. an object file for each public test source file: Because your makefile is required to use separate compilation, it will need to create an object file for each public test source file. an executable for each public test: Your makefile will need to have a separate target to build each public test executable. These targets must have names ending in .x (public01.x, public02.x, etc.) and must build executables with the same filenames as those targets. (Your code will not compile on the submit server if your makefile has incorrect target names or builds executables with the wrong names.) By looking at the source file for each public test you can see what object files have to be linked together to create it. Because your makefile is required to use separate compilation, it must link the appropriate object files necessary to build each executable, not directly compile source files to form executables. clean: This target must delete the object files and executables for all the public tests, and pq.o and check-string-arrays.o, from the current directory. • Your makefile may contain additional targets, for example to build whatever tests you create to exercise your functions with, as long as it has the targets described above. • Your makefile should not directly compile header files in compilation commands (e.g., do not have compilation commands like gcc -c pq.c pq.h). • Your makefile should have all needed dependencies, otherwise programs may not get built correctly, but it should not have any unnecessary dependencies, because that would lead to unnecessary compilations. • Make has many features were not explained in class, because they are difficult for a beginner to use correctly. You are only allowed to use the features of make that were covered in class. If you do use features not explained in class your submission may not compile on the submit server for technical reasons not worth explaining here, and the TAs can not help you fix your makefile in office hours. You will also lose credit. Almost every student in previous semesters who has tried to use advanced features of make in this course has made at least some mistakes. Consequently you should write a simple and straightforward makefile, using just the features of make that were covered. If there is no makefile with your submission, or if your makefile does not satisfy these requirements, either your program will not compile at all on the submit server, or it might compile for the public tests but not for the secret tests. Do not wait to write your makefile. Writing it will preclude the need to type commands for compiling the public tests, so you can avoid making mistakes. Much more importantly, various mistakes in writing a makefile can cause your code to not compile correctly– writing your makefile and using it all during develop- ment, every time you compile your code, will enable you to test it and ensure it works right. Before submitting, you must run make clean, then run the single command make, to ensure that your makefile builds all the public tests correctly. This is the situation in which your makefile has to work on the submit server– being able to build the tests when there are no executable or object files in the directory– so you must test it and ensure it works right in the same circumstances. To reiterate, your Makefile must use separate compilation– each source file needed to form an executable must be separately compiled, then the independent object files linked together, to form the executable. 5 Black–box testing program You will lastly write a program, in a file bbtp.c, that tests any priority queue implementation for conformance to the descriptions of the functions in Project #6 (and of the description of peek() above). We will run your program with several priority queue implementations written by us, some of which contain errors. Your score for this part of the project will be based on how well your testing program detects the correct versus the incorrect implementations. This is an example of black–box testing, because you will not see the source code of the implementations you will be testing. (bbtp.c stands for “black box testing program”.) The code supplied to you includes an example bbtp.c file that has only two simple tests: one checks whether size() returns the right value for a queue with several elements; the other checks whether dequeue() returns the right element when called after adding several elements to a queue. You should expand the supplied bbtp.c by adding (many) more tests to create your own bbtp.c. Each test should check for an expected behavior based on the descriptions of the priority queue functions as described. bbtp.c should include pq.h but it should not include your pq.c file (source files normally never #include other source files). We will be link it with different implementations of the priority queue that we wrote, for different secret tests. Ideally you would be able to write different tests in separate source files, like the public and secret tests, but due to difficulties in setting things up on the submit server all your tests have to be in the same single file bbtp.c. You are encouraged to write separate functions for each thing your testing program is testing. The supplied bbtp.c illustrates this. Your submission must contain a file named bbtp.c that successfully compiles, or your entire project submission will fail to compile for any tests when submitted. So even if you haven’t started writing your bbtp.c program, your submission must at least contain a compilable bbtp.c file in order to work for any other tests. (The supplied file is adequate for this purpose.) If your testing program does not detect any errors it must quit with an exit status of CORRECT (which is defined in the pq.h file for this project). (Chapter 15 of the Reek text, which you were expected to read on your own, discusses how a program’s exit status can easily be returned.) If your program does detect any errors it must quit with an exit status of FOUND_BUG (also now defined in pq.h). It doesn’t matter what output your bbtp.c produces before quitting; you may have it produce whatever output, if any, you find useful. Note that the secret tests that check your bbtp.c are in some sense “backwards” compared to typical project tests. Usually our main program calls the functions that you write. But here your bbtp.c is the main program, and it calls functions we have written (which you wrote versions of also). Keep this in mind when writing makefile rules for your own tests of this part of the project. How do you come up with tests for your bbtp.c? Read the descriptions of the desired behavior of the priority queue functions in Section 3 of Project #6 carefully (as well as the description of peek() above). Identify as many ways you can think of in which the functions could have incorrect behavior. Write tests that would check for that behavior. To test your bbtp.c, make a copy of your pq.c (for example, pq-wrong.c), introduce bugs into it (it may be better to do this one bug at a time), and ensure that your testing program finds the bug (i.e., exits with FOUND_BUG when compiled and linked with the buggy version). (Of course your bbtp.c might find unintentional errors in your pq.c which you should fix, because that might be behavior that is tested in secret tests of this project.) Also make sure that your bbtp.c continues to exit with CORRECT when linked with your correct priority queue implementation (pq.c), once you think it is free of bugs. 5.1 Some constraints on your testing program • All the bugs in our implementations involve functions returning the wrong value or storing information incorrectly into a Priority queue. Our functions do not have any bugs that would cause program crashes, assuming you pass valid pointers into the functions that have pointers as parameters. • Our functions also do not have bugs that cause memory leaks or memory corruption. • Your testing program will only be able to do black–box testing. In particular, it will not be able to examine or modify the internals of Priority queues in testing our implementations, because you have no idea what data structures we use to store priority queues. You can call only those functions that appear in pq.h. (Reread this paragraph carefully.) Your bbtp.c cannot assume that our priority queues are implemented the same way as yours and try to access internal structures or call helper functions present in your pq.c. If it does this your tester may compile and run fine for you, but will almost certainly not even compile with our priority queue implementations. (Reread this paragraph carefully.) 5.2 Some hints regarding your testing program • Read the descriptions of the functions very carefully– several times– because their behavior as described is what your testing program needs to test for. • Be sure to test your testing program with a correct priority queue implementation. In this case CORRECT should be returned. Don’t test only with incorrect priority queue implementations and overlook this simple case. • The lcov code coverage tool either had been explained in discussion section already, or if not will be explained soon. You are welcome to use lcov to aid in writing your testing code, so that you can be sure that your tests at least cover all the parts of your function implementations. However, if you do, you must remove all lcov–related options from your Makefile rules before sub- mitting your project, otherwise, your code may not compile on the submit server, because lcov is not installed on the submit server. It will be much easier to remove the lcov options if you add a variable which has the options (such as LCOVFLAGS) at the top of your Makefile, which you can just change in one place before submitting. Note that you may not give any parts or ideas from your project to anyone else, including test data. This means that not only may you not give anyone else your bbtp.c, you may also not provide them with any ideas or suggestions of how to write it or what to test in it. A Development procedure review A.1 Obtaining the project files, compiling, checking your results, and submitting Log into the Grace machines and use commands similar to those from before: cd ~/221 tar -zxvf ~/221public/project8/project8.tgz This will create a directory project6 that contains the necessary files for the project, including the two header files pq.h and check-string-arrays.h, and the public tests. You must have your coursework in your course disk space for this class. These are the five files you need to create or have in this project, and what they should include. (Note that your filenames must match exactly or your code will not even compile on the submit server.) • Copy your pq-datastructure.h file from your project6 directory to the project8 directory. It should contain your definition of Priority_queue, and any other definitions needed by it, but it should not include any other files. • Write your makefile, in a file named Makefile, to compile your code with all of the public tests. • Copy your pq.c file from your project6 directory to the project8 directory, write the new function peek() in it, and fix any bugs that the public tests (which used to be the Project #6 secret tests) reveal. It should contain all of the functions from Project #6, plus any helper functions of yours that they use. It should include any necessary library header files. It must include pq.h. Optionally (as a matter of personal preference)– only if you have added correct conditional compilation directives to your pq-datastructure.h header file, pq.c can also include pqdatastructure.h as well, but this is not necessary, as it includes pq.h, which includes pq-datastructure.h. • Copy your check-string-arrays.c file from your project6 directory to the project8 directory and fix any bugs in it that the public tests (which used to be the Project #6 secret tests) reveal. It should contain only the function check_string_arrays() and it should include check-string-arrays.h and any necessary library header files. • Add tests of your own to the bbtp.c file included in the project tarfile. It already includes pq.h– do not remove this include. It should also include any necessary library header files. Optionally (as a matter of personal preference)– only if you have added correct conditional compilation directives to your pq-datastructure.h header file, bbtp.c can also include pq-datastructure.h as well, but this is not necessary, as it includes pq.h, which includes pq-datastructure.h. But keep in mind that your testing program cannot refer to any of the specific data structures that you used to implement priority queues. It can only use things that are mentioned in pq.h, because we are going to compile it with our own priority queue implementations. The bugs your tester is looking for will only be in the priority queue functions in pq.c, not in check_string_arrays(), so your bbtp.c should not include check-stringarrays.h. We are not linking bbtp.c with the object file check-string-arrays.o on the submit server, so if your bbtp.c tries to call check_string_arrays() your entire program will fail to compile when submitted. You will not be compiling your code from the command line now; instead you will use make and your makefile to compile everything. diff can be used as before to check whether your code passes a public test or not, for example: make public01.x public01.x | diff -b - public01.output (You can also run make from Emacs if desired.) As before, the command submit from the project directory will submit your project. Before you submit you must make sure you have passed all the public tests, by compiling and running them yourself, and you must make sure that your Makefile works, by testing it carefully as described in Section 4. A.2 Grading criteria Your grade for this project will be based on: More than half of your score will come from secret tests. Note that even the Project‘#6 secret tests are hardly exhaustive, and there is significant behavior of the functions that they do not test. If you don’t write extensive tests of your functions yourself you could lose a lot of credit on the secret tests, and wind up with a low score. Although it was not done in Project #6, your pq.c and check-string-arrays.c code will now be graded for style. Your Makefile will be checked for “stylistic” errors like extra dependencies, unnecessary dependencies, using makefile features that were not covered in class, or other issues. Even if it correctly builds the public tests these types of mistakes might result in losing credit. But you aren’t required to comment your makefile, since the criteria in the course project style guide on ELMS apply only to C code. public tests 30 points secret tests 55 points programming style 15 points B Project–specific requirements, suggestions, and other notes As mentioned, you must now use correct conditional compilation (as shown and explained in lecture). in your header file pq-datastructure.h. Note that you must spell the name of the preprocessor symbol that is used for conditional compilation either as described in class, or in the form that the Reek text uses, or you may lose credit. As in Project #6, your functions do not have to free any memory. The TAs explained valgrind (memcheck) in discussion section earlier. If you think your code may have problems in the heap (such as using uninitialized allocated memory, or overwriting beyond the end of a dynamically allocated memory region in the heap) you can use valgrind to help find them, but since you are not required to free mem- ory you can ignore any memory leaks that it identifies. Any other memory problems that it indicates are things that probably should be fixed. Be careful not to have any pointer aliasing in writing your functions. Do not write code (loops) that has the same effect as any string library functions. If you need to perform an operation on strings and there is a string library function already written that accomplishes that task, you are expected to use it, otherwise you will lose credit. You may lose credit if you cast the return value of the memory allocation functions. Besides being completely unnecessary, in some cases this can mask certain errors in code. You cannot modify anything in the header files pq.h or check-string-arrays.h, or add anything to them, because your submission will be compiled on the submit server using our versions of these files. You cannot write any new header files of your own either. Your code may not comprise any source (.c) files other than pq.c, check-stringarrays.c, and bbtp.c, so all your code must be in these files. Do not write a main() function in pq.c or check-string-arrays.c, because your code won’t compile (our tests already have main() functions). C• For this project you will lose one point from your final project score for every submission that you make in excess of five submissions. You will also lose one point for every submission that does not compile, in excess of two noncompiling submissions. Therefore be sure to compile, run, and test your project’s results before submitting it. We hope everyone will check their code themselves carefully, and not incur these penalties. If your code compiles on Grace but not on the submit server, something in your account setup is probably wrong. In this case run check-account-setup and come to office hours for help if you can’t fix any problems that it identifies yourself. • If you have a problem with your code and have to come to the TAs’ office hours for debugging help you must come with tests you have written yourself that illustrate the problem (not just the public tests), what cases it occurs in, and what cases it doesn’t occur in. In particular you will need to show the smallest test you were able to write that illustrates the problem, so whatever the cause is can be narrowed down as much as possible before the TAs even start helping you. You must also have used the gdb debugger, explained recently in discussion section, and be prepared to show the TAs how you attempted to debug your program using it and what results you got. To emphasize: the TAs will not look at your program’s results on any of the public tests in office hours. You must have written your own tests to receive any help with your program code. • Recall that the course project grading policy on ELMS says that all your projects must work on at least half of the public tests (by the end of the semester) in order for you to be eligible to pass the course. • Don’t use nano or pico for editing programs. These are very small limited text editors intended for editing short emails. There are several full–featured text editors available in UNIX. Emacs is generally similar to nano and pico, except it’s far more powerful. Academic integrity Please carefully read the academic honesty section of the syllabus. Any evidence of impermissible coopera- tion on projects, use of disallowed materials or resources, publicly providing others access to your project code online, or unauthorized use of computer accounts, will be submitted to the Office of Student Conduct, which could result in an XF for the course, or suspension or expulsion from the University. Be sure you understand what you are and what you are not permitted to do in regards to academic integrity when it comes to projects. These policies apply to all students, and the Student Honor Council does not consider lack of knowledge of the policies to be a defense for violating them. More information is in the course syllabus– please review it now. The academic integrity requirements also apply to any test data for projects, which must be your own original work. Exchanging test data or working together to write test cases is also prohibited.     </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.Object This project will extend upon your priority queue implementation from Project #6. You will now do some smaller things: add conditional compilation directives to your header file pq-datastructure.h and add one short new function to your priority queue implementation, and some larger things&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>完成70个编程小任务...</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000069/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000069/</id>
    <published>2018-11-04T13:07:12.000Z</published>
    <updated>2018-11-04T13:07:45.818Z</updated>
    
    <content type="html"><![CDATA[<p> Topless City is a small chain of car dealerships that sells vintage convertibles throughout the Southern United States.    </p><a id="more"></a><p>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><ol start="49"><li>Topless City is a small chain of car dealerships that sells vintage convertibles throughout the Southern United States. It is owned and managed by Brandon and Kyle Winslow. Each month Brandon and Kyle attend two car auctions, at which they purchase convertibles: one in Atlanta, the other in Miami. The cars are then shipped to one of three locations: Jackson, Mississippi, Birmingham, Alabama, or Orlando, Florida. There, the cars are refurbished, repainted, safety inspected, and sold at the Topless City dealership in that city. In August, Brandon found 20 cars at the Atlanta auction, and Kyle found 50 cars at the Miami auction which met the needs of the company. Only 15 cars can be worked on at each city during the month, however. Another auction is coming up in September; thus, only 45 cars are to be purchased in August. Topless City wishes to minimize its costs of transporting the cars to the refurbishing locations. The cost to transport cars between cities is shown in the table for problem 49. Problem 49 Jackson Birmingham Orlando Atlanta $200 $100 $175 Miami $250 $200 $125 a. Give a linear programming formulation for this problem. b. Formulate the problem as a transportation problem and solve. c. Do the assumptions of the transportation model appear to be valid for this problem? Comment. 50. Consider the situation faced by Topless City in problem 49. For some time now, Brandon and Kyle have been    </li></ol><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Topless City is a small chain of car dealerships that sells vintage convertibles throughout the Southern United States.    &lt;/p&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Essay College Students and Mental Health代写</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000068/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000068/</id>
    <published>2018-11-04T13:06:37.000Z</published>
    <updated>2018-11-04T13:07:06.810Z</updated>
    
    <content type="html"><![CDATA[<p>Background: We have read and discussed multiple texts that address the issue of the rising demand on college campuses for mental health services.</p><p>Now it is time for you to join the continuing conversation by responding to the different authors’ ideas about the issue and using their arguments to inform your own.</p><p>Task: Construct a thesis-driven essay in which you respond to the following question:</p><pre><code>How should college and university faculty and administrators respond to the increasing demand               for student mental health services, and what should students do to help themselves? </code></pre><p>Essay Length: 1200-1500 words (4-5 pages), plus a 1-2 page reflection.<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>Background: We have read and discussed multiple texts that address the issue of the rising demand on college campuses for mental health services.</p><p>Now it is time for you to join the continuing conversation by responding to the different authors’ ideas about the issue and using their arguments to inform your own.</p><p>Task: Construct a thesis-driven essay in which you respond to the following question:</p><pre><code>How should college and university faculty and administrators respond to the increasing demand               for student mental health services, and what should students do to help themselves? </code></pre><p>Essay Length: 1200-1500 words (4-5 pages), plus a 1-2 page reflection.</p><p>Sources (on Canvas):</p><p>“Declining Student Resilience” by Peter Gray</p><p>“Finding Strength” by Deborah Blum</p><p>“The Coddling of the American Mind” by Greg Lukianoff and Jonathan Haidt</p><p>“Have Smartphones Destroyed a Generation? by Jean M. Twenge</p><p>“College students are forming mental health clubs—and they’re making a difference” by Amy Ellis Nutt</p><p>The Harvard Forum: College Students and Mental Health (link to video online) <a href="https://theforum.sph.harvard.edu/events/college-students-and-mental-health/" target="_blank" rel="noopener">https://theforum.sph.harvard.edu/events/college-students-and-mental-health/</a></p><p>The Chronicle of Higher Education articles</p><p>The Basics:</p><p>·        Construct a thesis-driven essay in which you represent your own point of view that is responding to other points of view on the same issue.</p><p>·        Incorporate at least three  of the sources we examined in class (see list of sources above) into your essay.</p><p>·        Represent the existing conversation in your introduction paragraph.</p><p>·        Use direct quotation and summary to represent the others’ ideas and to establish, explain, and support your own view.</p><p>·        Use 8th edition MLA documentation style. You must include in-text citations and provide a Works Cited page for all of your sources. </p><p>Important Dates:</p><p>Thursday, October 18: Workshop. Bring two typed and printed drafts of your essay to class. Your draft must contain your introduction paragraph, at least one body section, and the outline of your remaining points.</p><p>Tuesday, October 23: Final draft and reflection due.</p><p>Reflection: Part I should answer the following questions:</p><ol><li><p>What’s your main point or perspective on the issue you are addressing? (Copy and paste your thesis statement here.)</p></li><li><p>Describe briefly the other (opposing) perspectives to which you respond.</p></li><li><p>Who is your audience?</p></li><li><p>As the author of this essay, how did you strive to come across? (Your ethos)</p></li></ol><p>Part II should answer these questions:</p><ol><li><p>Which peer comments did you use in your revisions? Which did you ignore? Be specific and explain why you used or ignored them.</p></li><li><p>What did you do particularly well in this essay? (You might point to a particular paragraph or even a particular sentence.) What makes this part noteworthy? </p></li><li><p>If you had more time, which part would you continue to work on? Why?</p></li><li><p>What did you think of the topic? Should it be used in future classes? Why?</p></li></ol><p>Tips: In building the “Entering the Conversation” essay, keep these points in mind:</p><p>➢    To argue effectively, you need to do more than simply assert your own opinions. Rather, you need to enter the existing conversation and respond to the views of others.</p><p>➢    Based on what we have discussed in class and read in the articles, identify the existing conversation by representing it in your introduction paragraph. Explaining what others are already saying on the topic will orient your reader and pave the way to your own argument. For example: Some argue…, while others suggest</p><p>➢    Do not begin your body paragraphs with quotes from source material. Instead, use quotes and paraphrases from source material to help you explain your own points. Remember, your own argument is the star of the essay; the claims of others merely help you make your points.</p><p>➢    Anticipate a potential objection from your reader and respond to it in order to strengthen your own argument.</p><p>➢    Acknowledge that those who argue on the other side of the issue have some valid concerns. Presenting opposing views fairly actually helps you strengthen your argument and build ethos.</p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Background: We have read and discussed multiple texts that address the issue of the rising demand on college campuses for mental health services.&lt;/p&gt;
&lt;p&gt;Now it is time for you to join the continuing conversation by responding to the different authors’ ideas about the issue and using their arguments to inform your own.&lt;/p&gt;
&lt;p&gt;Task: Construct a thesis-driven essay in which you respond to the following question:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;How should college and university faculty and administrators respond to the increasing demand               for student mental health services, and what should students do to help themselves? 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Essay Length: 1200-1500 words (4-5 pages), plus a 1-2 page reflection.&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>CS305 作業系統概論 Real-time Process Scheduling</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000067/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000067/</id>
    <published>2018-11-04T13:06:08.000Z</published>
    <updated>2018-11-04T13:06:31.174Z</updated>
    
    <content type="html"><![CDATA[<p>CS305 作業系統概論 Prog. #3 Real-time Process Scheduling 2018.05.14 一、 作業目的 在本作業中，利用模擬的方式來熟悉 Real-time Process Scheduling 的觀念。<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>CS305 作業系統概論 Prog. #3 Real-time Process Scheduling 2018.05.14 一、 作業目的 在本作業中，利用模擬的方式來熟悉 Real-time Process Scheduling 的觀念。 二、 作業內容 撰寫一個模擬程式自檔案中讀取 Real-time process 資訊，這些 process 的定義為 t(r, C, D, T) 其中 r is the arrival time (ms), C is the CPU burst (ms), D is the deadline, and T is the period. 模擬程式會顯示這些Real-time process 的使用rate monotonic scheduling (RMS)以及 earliest deadline first (EDF) 排程過程。並依照指定的時 段輸出模擬過程。在命令列以參數形式，內容是“rms”或是“edf”來指定是哪一種演算法。 如果在過程中發現某process會miss deadline，程式必須印出訊息，同時模擬中止。如果在同一時間中有 多個processes一起到達，則先顯示到達的情況再來顯示排程選擇的進行。如果有rate相同的processes，則 依照pid大小決定排程優先權：pid小的process具有高的排程優先權。 輸入檔案的範例： # Simulation output time: start end 0 300 # Process info: pid, r, C, D, T 1 0 3 9 9 2 0 4 10 10 3 0 5 15 15 例如下面是可能的輸出： &gt; rtsim rms data.txt 0 p1 arrives 0 p2 arrives 0 p3 arrives 0 p1 starts 3 p1 ends 3 p2 starts … 16 p3 misses the deadline … 三、 作業要點 1. 請注意，本作業使用的程式語言是C/C++，測試平台的作業系統： Ubuntu 17.10 LTS 64-bit。使用的 編譯程式為gcc/g++ 編譯器：7.2。其他平台或程式語言不在本次作業考慮範圍之內。如在測試平台上 無法編譯與執行，都不予給分。 2. 工作排程都是由0 ms開始模擬。資料檔案中， “#” 表示註解，第1個非註解行是顯示模擬結果的起始 時間與結束時間。接下來n個非註解行是process資訊， 執行檔名一律都是rtsim。程式執行必須使用下 面方式： rtsim rms data.txt 3. 本作業的評分方式如下： a. 能順利以RMS排程 2 ≤ n ≤ 5 個 processes，可輸出從0～300 ms的模擬結果。此項目最多得40分。 b. 能順利以EDF排程 2 ≤ n ≤ 5 個 processes，可輸出從0～300 ms的模擬結果。此項目最多得40分。 c. 可隨意顯示0～300 ms 其中任何一段時間兩個演算法的排程模擬結果。此項目最多得20分。 d. 完成以上所有基本功能者，才可按照以下項目，多得其他的分數。如果前面基本功能沒有全部成 功完成，以下進階功能不予計分。 如有實作進階功能的同學，請多加一個0或1的參數表示會不會有mutex的考慮。如果沒有指明，預 設是0。在文件中要明顯標明程式是否實作進階功能。 例如 ： rtsim rms data.txt 0 // 表示模擬最單純的RMS rtsim edf data.txt 1 // 表示模擬考慮priority inversion的EDF rtsim edf data.txt // 表示模擬最單純的EDF i. 在RMS中加入Priority inversion的情況。假設所有的processes都共用一個mutex，在模擬過程 中，每個process一開始執行，就會隨機決定該次執行是否會需要得到該mutex，同時在該次執 行結束時，會釋放該mutex。模擬時，需要將這些情況都顯示出來。此項目最多得25分。 例如，一個可能的輸出： … 60 p3 starts, gets mutex 62 p1 starts, gets mutex, blocked … ii. 如項目i，但是針對EDF來完成。此項目最多得25分。 4. 本作業需繳交檔案： a. 說明報告：檔案為docx或pdf格式。 i. 報告中必須說明程式的設計理念、程式如何編譯，以及如何操作。 ii. 報告中同時必須詳細說明你完成哪些部份。如有用到特殊程式庫，請務必說明。 iii. 請務必讓助教明白如何編譯及測試你的程式。助教如果無法編譯或測試，會寄信（最多兩 次）通知你來說明，但每說明一次，助教會少給你10分。 b. 完整原始程式碼。不可含執行檔。助教會重新編譯你們的程式。 5. 所有相關檔案，例如報告檔、程式檔、參考資料等，請壓縮成一個壓縮檔（不可超過2MB）後上傳 至portal。請注意，不可抄襲。助教不會區分何者為原始版本，被判定抄襲者，一律0分。 四、 繳交方式： 1. 最終繳交時間： a.電子檔在 2018.06.06以前，上傳至個人portal。如有多個檔案，將所有檔案壓縮成zip（rar 亦可）格 式，然後上傳。 b.上傳檔名格式：「學號<em>作業號碼.doc」或「學號</em>作業號碼.rar」。例如：912233_01.doc 或 912233_01.rar。 2. 如有違規事項者，依照課程規定處理。 3. 如需請假，請上portal請假，並持相關證明文件，在請假結束後的第一次上課時完成請假手續，並在 一週內完成補交。補交作業將以8折計算。 4. 老師不接受「門縫」方式繳交，助教也不接受任何作業。 五、 如有未盡事宜，將在個人portal板面公告通知。 六、 If you need any assistance in English, please contact Prof. Yang. 七、 參考資料 1. 課本第5章 2. <a href="http://www.twwiki.com/wiki/RMS" target="_blank" rel="noopener">www.twwiki.com/wiki/RMS</a> 3. <a href="https://github.com/sigsegved/RTOS-Scheduling-algo-simulation" target="_blank" rel="noopener">https://github.com/sigsegved/RTOS-Scheduling-algo-simulation</a> (此網站資料僅供參考，請勿抄襲)     </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CS305 作業系統概論 Prog. #3 Real-time Process Scheduling 2018.05.14 一、 作業目的 在本作業中，利用模擬的方式來熟悉 Real-time Process Scheduling 的觀念。&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Python web代写</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000066/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000066/</id>
    <published>2018-11-04T13:05:28.000Z</published>
    <updated>2018-11-04T13:06:02.906Z</updated>
    
    <content type="html"><![CDATA[<p>Generated Web Site for Aussie Airport Passenger Movements Your task in this assignment is to write a Python program that generates an informative web site about Airport Passenger Movements Month by Month From 1985-Present, showing summary statistics about the number of domestic and international airport passengers travelling in Australia month by month.<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>Generated Web Site for Aussie Airport Passenger Movements Your task in this assignment is to write a Python program that generates an informative web site about Airport Passenger Movements Month by Month From 1985-Present, showing summary statistics about the number of domestic and international airport passengers travelling in Australia month by month. This will allow viewers to get insights into the data, and to identify trends that are changing over time. Your program will read some input data from a text file (e.g., a spreadsheet in comma-separated-values, or CSV, format) and automatically generate several web pages with links going between the pages. The input data is updated each month, so the idea is that your program will be run on the updated input data each week or each month to automatically generate an updated web site that shows the latest trends and statistics. Each web page should show a different aspect of airport passenger movements, and how that aspect has changed over time. Some of your pages must have photos and graphs. Here are some suggestions for different pages you might generate:  Passenger movements per year, and how this rate is changing over time;  Passenger movements per Australian airport;  Passenger movements rates per year for each state (identify airport locations)  Passenger movements with the highest seasonal impact, eg Summer (12,1,2) vs Winter (6,7,8)  Seasonal passenger movements compared to each state  The airports with the largest growth (total amount of passengers served) over a period of time Important goals: A. For most of these pages, it would be even more interesting and useful if you could display the change in these statistics over time, such as comparing 1985 against 2017, or the first 5 years against the most recent 5 years. ICT112 Assignment 2 ICT112 TASK 2 2018 B. Also, for many of these pages, it would be more meaningful to airline companies if you could display the overall (all airports) seasonal statistics relative to the total number of passengers that were tourists (short stays) or permanent residents. That is tourists = (total number of international arrivals (Int_Pax_In) subtracted from the total short term arrivals). Seasons can be identified with the month code, eg Summer (12,1,2), Winter (6,7,8) and you may select any time period (year) you wish. To generate some of these relative statistics , you will need to obtain additional data from other sources, such as the file 340104.csv included. You can see other sources at the ABS government website - (<a href="http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/3401.0Feb" target="_blank" rel="noopener">http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/3401.0Feb</a> %202018?OpenDocument). You may need to convert those to CSV first. You may identify other relative statistics using these sources if you wish, but make sure you clearly document all your data sources. C. There must be one top-level page, index.html, that is the entry point for the web site. This must give an overview of the whole website, and should have links to all the other pages. D. All the HTML files and graphs/tables in your whole web site must be generated by your Python program, so that your whole web site can be automatically updated when the input data values are updated, just by rerunning your Python program. Learning Objectives In this assignment you will learn how to: 1. use top-down design to divide a larger data processing task into parts; 2. use Python to read and write text files (CSV data files); 3. use functions to raise the abstraction level of your program; 4. analyse data to produce graphs and summary statistics; 5. use string and list methods to generate HTML. Marking Criteria This assignment is due at the end of Week 13 (Friday 11:55pm). You must submit your files in a single .zip file, via Blackboard. Your .zip file should include your Jupyter Notebook (containing your Python program), your input data files, all your generated output web pages; and any image files, graphs and CSS files that are used in your web pages. It will be marked out of 30. The marking criteria is as follows:  Jupyter Notebook Structure [6 marks]. This should use markup cells and headings to divide your program into parts: o Title, plus your name and student number; o Introduction, which explains the structure of your web site, and To create a .zip file on a Windows PC, right-click on the folder containing all your Task 2 files, then select ‘Send to / Compressed (zipped) folder’. On a Mac, right-click on your folder and select the ‘Compress foldername’ option. ICT112 TASK 2 2018 3 the features / statistics / graphics that you have implemented; o Web-site overview, to explain the structure of your web site; o Python code, preferably broken into subsections for each part of your program;  Web Design and Functionality [6 marks]. To achieve maximum marks, the generated web site should contain several (5-10) web pages, with an entry page (index.html) that links to all the other pages, and the other pages linking back to the entry page; good use of images; the layout and organisation of the pages should be elegant and readable, with appropriate choices of colours; good use of HTML tables for layout; the generated pages should conform to HTML standards; a simple CSS file should be used to specify the look of the web pages (this CSS file does not have to be generated by your program).  Data Analysis and Visualisation [6 marks]. Your program should analyse the data and generate (and include in the web pages): o one or more informative graphs/tables that show various aspects of the data; o summary statistics for various group of data (e.g. an average, or maximum, or minimum, or sum) over a period of time o some relative statistics, as mentioned in goal B above.  Python Functions [6 marks]. Most your Python code should be inside functions; function parameters should be used to make your program concise and flexible; each function should include appropriate function docs; correct and meaningful naming conventions should be followed for function names and variable names.  Program Design and Algorithms [6 marks]. To achieve maximum marks, your program should be elegantly designed: be concise; use constants for important values/strings that are likely to change; use appropriate data structures (e.g. strings, lists, tuples, dictionaries, or objects) to store the data; make good use of Python libraries and methods (e.g. for strings and lists); and be reasonably efficient during execution (e.g. reading the input files just once, rather than many times). A key criterion is that your program should not contain blocks of code that are duplicated or similar (such blocks of code should be simplified into a single block of code by good use of loops or functions). Note: the generated web pages should NOT contain any Javascript, as the goal of this assignment is to generate simple static web pages using Python.     </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Generated Web Site for Aussie Airport Passenger Movements Your task in this assignment is to write a Python program that generates an informative web site about Airport Passenger Movements Month by Month From 1985-Present, showing summary statistics about the number of domestic and international airport passengers travelling in Australia month by month.&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000065/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000065/</id>
    <published>2018-11-04T13:04:16.000Z</published>
    <updated>2018-11-04T13:05:12.573Z</updated>
    
    <content type="html"><![CDATA[<p>MAST90072 – Assignment 3 Instructions: Please complete the Plagiarism Declaration. (If you haven’t done that already.) Your solutions to the assignment should be left in the MAST90072 assignment boxes, located on the ground floor in the Richard Berry Building (north entrance). Don’t forget to staple your solutio<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>MAST90072 – Assignment 3 Instructions: Please complete the Plagiarism Declaration. (If you haven’t done that already.) Your solutions to the assignment should be left in the MAST90072 assignment boxes, located on the ground floor in the Richard Berry Building (north entrance). Don’t forget to staple your solutions and to print your name, student ID, the subject name and code and your tutorial session. The submission deadline is 11:59 pm, Monday, 21st of May. (Remember, the building closes at 6 pm.) Many questions have short answers. Where interpreting data analyses, give careful and concise explanations. Clarity, neatness and style count. 1. In a survival analysis experiment, what three types of censoring are you likely to encounter. 2. Why is the logistic function P(x) = exp(x)/(1+exp(x)) employed to model probabilities as a function of x? Why not use a linear model? If P(x) is the probability of an event of interest as a function of x, give expressions for the odds of this event and the log-odds of the event as functions of x. 3. Your company has received complaints about the purity of a protein you have been producing. To study the problem the following alternatives were proposed: (a) Measure the purity of the first four batches produced each day. (b) Measure the purity of four batches sampled at random times during each day. (c) Measure the purity of four batches arising from taking a sample every two hours for each 8 hour working day. (d) Measure the purity of every batch produced. What are the benefits and potential problems associated with each of the method? Which would you recommend? 4. The SAS data set plasma from Exercise 7.1 Der &amp; Deveritt was collected to relate erythrocoyte sedimentation rate (ESR) to two plasma proteins fibrinogen and γ-globulin. The value ESR= 0 represents a healthy individual and ESR=1 an unhealthy individual. Fit one logistic regression model to examine the relationship between ESR and the two proteins. Give a brief summary of your conclusions based on only this model. 5. The (artificial) data in the file loglin.dbf is the number of ecoli bacteria that grew in a media. The explanatory variables x.1 and x.2 represent the chemical composition of the media and x.3 relates to the amount of light. Fit one log linear Poisson regression model with all terms as main effects to these data. Give a brief summary of your conclusions based on only this model. 6. The SAS data set prostate (Exercise 8.2 of Der &amp; Everitt) arose from a randomized trial to compare two treatments for prostate cancer. Treatment value 0 is the placebo, Status; 1=dead, 0=censored, Time is survival time in months, Age is age at trial entry, Haem is Serum haemoglobin level, size is the tumor size (cm squared) and Gleason is an index combining tumor stage and grade. Fit a proportional hazards model to determine the most important variables related to survival. Give a brief summary of your conclusions.    </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MAST90072 – Assignment 3 Instructions: Please complete the Plagiarism Declaration. (If you haven’t done that already.) Your solutions to the assignment should be left in the MAST90072 assignment boxes, located on the ground floor in the Richard Berry Building (north entrance). Don’t forget to staple your solutio&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000064/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000064/</id>
    <published>2018-11-04T13:03:42.000Z</published>
    <updated>2018-11-04T13:04:09.933Z</updated>
    
    <content type="html"><![CDATA[<p>MAST90072 – Assignment 3 Instructions: Please complete the Plagiarism Declaration. (If you haven’t done that already.) Your solutions to the assignment should be left in the MAST90072 assignment boxes, located on the ground floor in the Richard Berry Building (north entrance).<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>MAST90072 – Assignment 3 Instructions: Please complete the Plagiarism Declaration. (If you haven’t done that already.) Your solutions to the assignment should be left in the MAST90072 assignment boxes, located on the ground floor in the Richard Berry Building (north entrance). Don’t forget to staple your solutions and to print your name, student ID, the subject name and code and your tutorial session. The submission deadline is 11:59 pm, Monday, 21st of May. (Remember, the building closes at 6 pm.) Many questions have short answers. Where interpreting data analyses, give careful and concise explanations. Clarity, neatness and style count. 1. In a survival analysis experiment, what three types of censoring are you likely to encounter. 2. Why is the logistic function P(x) = exp(x)/(1+exp(x)) employed to model probabilities as a function of x? Why not use a linear model? If P(x) is the probability of an event of interest as a function of x, give expressions for the odds of this event and the log-odds of the event as functions of x. 3. Your company has received complaints about the purity of a protein you have been producing. To study the problem the following alternatives were proposed: (a) Measure the purity of the first four batches produced each day. (b) Measure the purity of four batches sampled at random times during each day. (c) Measure the purity of four batches arising from taking a sample every two hours for each 8 hour working day. (d) Measure the purity of every batch produced. What are the benefits and potential problems associated with each of the method? Which would you recommend? 4. The SAS data set plasma from Exercise 7.1 Der &amp; Deveritt was collected to relate erythrocoyte sedimentation rate (ESR) to two plasma proteins fibrinogen and γ-globulin. The value ESR= 0 represents a healthy individual and ESR=1 an unhealthy individual. Fit one logistic regression model to examine the relationship between ESR and the two proteins. Give a brief summary of your conclusions based on only this model. 5. The (artificial) data in the file loglin.dbf is the number of ecoli bacteria that grew in a media. The explanatory variables x.1 and x.2 represent the chemical composition of the media and x.3 relates to the amount of light. Fit one log linear Poisson regression model with all terms as main effects to these data. Give a brief summary of your conclusions based on only this model. 6. The SAS data set prostate (Exercise 8.2 of Der &amp; Everitt) arose from a randomized trial to compare two treatments for prostate cancer. Treatment value 0 is the placebo, Status; 1=dead, 0=censored, Time is survival time in months, Age is age at trial entry, Haem is Serum haemoglobin level, size is the tumor size (cm squared) and Gleason is an index combining tumor stage and grade. Fit a proportional hazards model to determine the most important variables related to survival. Give a brief summary of your conclusions.    </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MAST90072 – Assignment 3 Instructions: Please complete the Plagiarism Declaration. (If you haven’t done that already.) Your solutions to the assignment should be left in the MAST90072 assignment boxes, located on the ground floor in the Richard Berry Building (north entrance).&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Computer Science 320SC – (2018)</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000063/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000063/</id>
    <published>2018-11-04T13:03:11.000Z</published>
    <updated>2018-11-04T13:03:37.469Z</updated>
    
    <content type="html"><![CDATA[<p>Computer Science 320SC – (2018) Programming Assignment 6 Due: Saturday, October 20th (11:58pm) Requirements This sixth assignment lets you get familiar with further algorithm design techniques covered in class (e.g. network flow). There are two algorithms/programs required but three different submissions (two data sets for one of them).<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>Computer Science 320SC – (2018) Programming Assignment 6 Due: Saturday, October 20th (11:58pm) Requirements This sixth assignment lets you get familiar with further algorithm design techniques covered in class (e.g. network flow). There are two algorithms/programs required but three different submissions (two data sets for one of them). It is worth 5% of your total course marks. Please try and test with your own generated input cases before submitting to the automated marker. Task 1: Peg Removal We have a few pegs placed in a line of twelve holes. We want to remove pegs by jumping over other pegs. Jumped over pegs disappear as a result of a move. A move is possible if there is a straight line of three adjacent holes, where two adjecent holes contain a peg and the third is empty. The outside peg may jump over the middle peg and be placed in the vacant hole on the other outside position. To illustrate these moves consider the following figure (black nodes are pegged holes). Peg at position 8 jumps to the hole at position 6 then the peg at position 5 jumps past the peg at position 6 and ends up at position 7. Your goal is to find a sequence of moves such that as few pegs as possible are left. The input consists of several cases. The first line is an integer denoting how many. The subsequent lines are text strings of 12 characters in length consisting of ‘-’ (minus) and ‘o’ (little oh). An ’o’ represents an peg and an ‘-’ represents an empty hole. Output an integer denoting the smallest number of remaining pegs obtained by some sequence of moves. Sample Input: 5 –ooo–oo— ooooo—–oo oooooooooooo -o—–oo— -oo-oo-oo— Sample Output: for program named peg.ext 2 4 12 2 2 1 Task 2: UN Laptops The United Nations (UN) is holding a computer convention and various delagates from around the world come with laptops and want to plug them into outlets at the venue. Unfortunately, not all countries use the same type of plugs. The UN venue supports a few popular types directly. Also they have an unlimited supply of various types of adaptors. A delagate may need one or more adaptors to connect and power his/her computer. Your task is to decide the minimum number of delagates that are left without power, given a set of outlets (of the building), types of adaptors available, and the types of plugs (of the laptops). The input will consist of several cases as specified by an integer on the first line. Each case is then given in three parts. The first line is an integer 1 ≤ n ≤ 500 indicating the number of outlets in the building. The next n lines consist of a string indicating the type of each outlet. The next line of the case consists of an integer 1 ≤ m ≤ 500 indicating the number of laptops. The next m lines consist of a string indicating the type of the plug for each laptop. The next line of the case consists of an integer 1 ≤ k ≤ 1000 indicating the number of adaptors types available. This is followed by k lines of two strings separated by one space. These lines indicate the plug conversion for an adaptor (first type to second type). All strings will be alphanumeric and of length at most 25. For example in the following input the number of cases is 2. For the first case we have three outlets of two types (one NZ and two British), then three laptops (two have NZ plugs and one has a British plug) Finally we have two types of adapters: the first one converts NZ to American and the other one converts American to British. All three laptops can be used, with one of the NZ plugs using both adaptors. Sample Input: 2 3 NZ British British 3 NZ British NZ 2 NZ American American British 4 A B C D 5 B C B B X 3 B X A X X D Sample Output: 0 2 Submit programs laptopsE.ext and laptopsH.ext to test easy and harder data sets. Submission Procedure For each of these submissions you may use the folling extensions for ext to indicate which language/compiler to use: { java, cpp, py, cs }, that indicates Java/C++/Python/C#(mono). The automarker runs on a Debian linux box and uses the most recent compilers that are packaged by them. Please use just one source file per problem. For this assignment there is two marks awarded for Task 1 and and three marks awarded for Task 2    </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Computer Science 320SC – (2018) Programming Assignment 6 Due: Saturday, October 20th (11:58pm) Requirements This sixth assignment lets you get familiar with further algorithm design techniques covered in class (e.g. network flow). There are two algorithms/programs required but three different submissions (two data sets for one of them).&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>COMP20003 Algorithms and Data Structures Second (Spring) Semester 2018</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000062/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000062/</id>
    <published>2018-11-04T13:02:27.000Z</published>
    <updated>2018-11-04T13:03:07.233Z</updated>
    
    <content type="html"><![CDATA[<p>COMP20003 Algorithms and Data Structures Second (Spring) Semester 2018 [Assignment 1] Olympics Datasets Information Retrieval using Binary Search Trees Handed out: Friday, 17 of August Due: 8:00 AM, Monday, 3 of September Purpose The purpose of this assignment is for you to:<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>COMP20003 Algorithms and Data Structures Second (Spring) Semester 2018 [Assignment 1] Olympics Datasets Information Retrieval using Binary Search Trees Handed out: Friday, 17 of August Due: 8:00 AM, Monday, 3 of September Purpose The purpose of this assignment is for you to: • Increase your proficiency in C programming, your dexterity with dynamic memory allocation and your understanding of linked data structures, through programming a dictionary. • Increase your understanding of how computational complexity can affect the performance of an algorithm by conducting orderly experiments with your program and comparing the results of your experimentation with theory. • Increase your proficiency in using UNIX utilities. Background A dictionary is an abstract data type that stores and supports lookup of key, value pairs. For example, in a telephone directory, the (string) key is a person or company name, and the value is the phone number. In a student record lookup, the key would be a student ID number and the value would be a complex structure containing all the other information about the student. A dictionary can be implemented in C using a number of underlying data structures. Any implementation must support the operations: makedict a new dictionary; insert a new item (key, value pair) into a dictionary; search for a key in the dictionary, and return the associated value. Most dictionaries will also support the operation delete an item. Your task In this assignment, you will create a simplified UNIX Information Retrieval system, a search engine as a concrete instance of a dictionary, and we’ll use it to look up information about Olympic athletes. You’ll search how many medals an athlete won overall the competitions. There are two stages in this project. In each stage you will code a dictionary in the C programming language. A binary search tree will be the underlying data structure for both stages. In this assignment the search keys are not guaranteed to be unique. In this assignment we use variants of the binary search tree designed to handle duplicates, i.e. by either dividing nodes using &lt;= &gt;, or by using &lt; &gt; and a linked list for items with same key. You will use a Makefile to direct the compilation of two separate executable programs, one for Stage 1 and one for Stage 2, each of which uses a different variant of the binary search tree. In both stages of the assignment, you will insert records into the dictionary from a file. You will then look up and output the records (data) contained by the dictionary, counting and outputting the number of key comparisons used in the search. 1</p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;COMP20003 Algorithms and Data Structures Second (Spring) Semester 2018 [Assignment 1] Olympics Datasets Information Retrieval using Binary Search Trees Handed out: Friday, 17 of August Due: 8:00 AM, Monday, 3 of September Purpose The purpose of this assignment is for you to:&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>University of Wollongong School of Computing and Information Technology CSCI464/964 Computational Intelligence Autumn 2018</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000061/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000061/</id>
    <published>2018-11-04T13:00:40.000Z</published>
    <updated>2018-11-04T13:02:22.961Z</updated>
    
    <content type="html"><![CDATA[<p>University of Wollongong School of Computing and Information Technology CSCI464/964 Computational Intelligence Autumn 2018 Assignment 3<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>University of Wollongong School of Computing and Information Technology CSCI464/964 Computational Intelligence Autumn 2018 Assignment 3 (Due: 4:30PM, Monday 21 May) 20 marks — Part 1 (Genetic Programming, 10 marks) — Aim: This assignment is intended to provide basic experience in solving difficult problems with Genetic Algorithms (GAs). After having completed this assignment you should know how to implement a GA in C++ and find a near optimal solution to hard problems like the Traveling Sales Person Problem (TSP). Preliminaries: In the TSP, the goal is to find the shortest distance between N different cities. The path that the sales person takes is called a tour. The following example shows a near optimal tour between 100 cities. To test every possible path for an N city tour requires N! math additions. For example, a 30 city tour would be 2.65 X 1032 additions. Assuming 1 billion additions per second, this would take over 8,000,000,000,000,000 years. Adding just one more city would cause the number of additions to increase by a factor of 31. Obviously, this is an impossible solution to find mathematically. However, a genetic algorithm (like that shown above) can be used to find a near perfect solution in very little time. The basic concept of Genetic Algorithms is to simulate Darwinian evolution by implementing survival of the fittest. To solve the travelling sales person problem using a GA, first create a group of many random tours in what is called a population. These tours are stored as a sequence of numbers representing cities. Second, produce a new population by repeatedly picking 2 of the better (shorter) tours from the population (ie parents) and by combining them using the crossover operator to create 2 new solutions (ie children) in the hope that they create a better solution. The mutation operator can also be applied to improve the chance of finding a shorter tour. Crossover is performed by picking a one or two random points in the parents’ sequences and switching the numbers (representing cities) in the sequence between the points. The difficulty in using a GA to solve the TSP is in crossing over the cities of parent solutions to produce child solutions. For example, as show below, crossing over the cities in the parents has resulted in City 1 occurring twice in Child 1 and City 5 occurring twice in Child 2. Furthermore, City 1 is missing in Child 2 and City 5 is missing in Child 1. Consequently, a more complicated crossover operator must be used to prevent this occurring. CSCI964 - Computational Intelligence - Autumn Session 2018 Page 2 Parent 1 1 2 3 4 5 Parent 2 3 5 2 1 4 Child 1 1 2 3 1 4 Child 1 3 5 2 4 5 Assignment Specification: To complete this assignment you are to implement a genetic algorithm for solving the TSP Toll Road problem. The TSP Toll Road problem is the same as the general TSP problem except that the cities have types (1:capital, 2:regional &amp; 3:country) and the cost (cents/km) of traveling between two cities depends on their type. The objective is to visit all cities at minimum cost. The table below shows the cost of traveling between different types of cities: For example, to travel between a regional city (type-2) and a capital city (type-1) that are 100km apart it would cost 100km x 7.5c = $7.50 . Data: Three data files are provided containing 100, 200 and 500 data items. Each data item represents the coordinates (x, y) of each city (in kms) and the city type (1:capital, 2:regional, 3:country). To assist with this task, a bare-bones GA written in C++ is provide in the file “ga.cpp”. However, this GA is for solving problems represented with bit strings and will need considerable modifications and enhancements to make it capable of finding solutions to the TSP. Your completed program should accept the filename of the TSP data file as a command line argument. If no filename is given your program should ask the user to enter the filename via the keyboard. The output of your program should show the minimum tour distance achieved by each generation. However, if this produces more than two pages of output, in your final program, modify your code so that every 5th, 10th or 20th generation is displayed. To receive full marks for this assignment the following steps must be completed. (Note: these steps do not have to be implemented in the order given. Step 1 is worth 4 marks. Step 2 is worth 1 mark, Step 3 is worth 2 marks and Step 4 is worth 3 marks.) Step 1: To implement the TSP on the code in the file ga.cpp, begin by writing a function to read a data file containing the locations of the cities and their type into a dynamically allocated array. Then alter the Init(), Crossover(), Mutate() and EvaluateFitness() functions appropriately to handle the TSP Toll Road problem. You are encouraged to design your own algorithms for these functions to get your GA performing optimally (see Step 4). However, to help you get started, the following suggestions are offered. Init() must be modified to load the initial pop members with random cities. Cities are represented with the numbers 0..n-1 where n is the number of cities in the data file. Make sure no city occurs more than once in each member. (Note: the first number in the given data files is the number of cities in the file. Use this number to appropriately allocate the size of member arrays etc. so your code will run on any of the given data files. City locations are represented by (x,y) coordinates (ie integers: 0..999).) Crossover() can be implemented in a variety of ways. A search of the internet should reveal some useful examples. You should make sure that the crossover operation does not result in any offspring containing duplicate cities. This can be done by locating any duplicate cities and replace each duplicate city with a missing city. (But which missing city?) Mutate() can be implemented by swapping two or more randomly selected cities in the member. Feel free to experiment with this to obtain increased performance. CSCI964 - Computational Intelligence - Autumn Session 2018 Page 3 EvaluateFitness() should calculate the fitness by adding all the distances between visited cities times their cost to get the tour cost. This will result in the fittest cities having the smallest cost. Thus you may have to modify how the BestMember is obtained and how parent selection is done. (Step 3 has more info on this.) Step 2: To avoid the large expense of calculating the same distances during each fitness evaluation, provide an n x n lookup table of the cost of traveling between cities where n is the number of cities to be visited. Thus, when fitnesses are calculated the cost of traveling between two cities can be looked up from the table more quickly. Step 3: involves providing your GA with two parent selection options. To do this, implement roulette wheel selection and provide a global constant to switch your GA between Tournament or Roulette Wheel selection. The following algorithm is offered as a suggestion for implementing roulette wheel selection: Copy fitnesses into a temp array Subtract the minimum pop fitness from each fitness to normalise them Subtract each normalised fitness from the normalized maximum pop fitness to get the scaled fitnesses Generate a random number between 0 and the sum of all the scaled fitnesses Set TempSum to 0 for i=0;iRandomNumber) return i; } This should work, however better performance may be achieved by scaling the fittnesses such that the fittest member occupies no more than 2 times as much space on the roulette wheel as members with average fitness. Step 4: Run your GA on all three data sets and experiment with different parameters (e.g crossover &amp; mutation types and mutation &amp; crossover probabilities) so that your GA finds the cheapest path in the minimum number of generations. Write up the results in your report. Step 5: Now modify your crossover and mutation operators so that the amount of change they cause to individuals becomes less as evolution progresses. Describe the modifications you have chosen to make in your report. Provide a brief comment block at the bottom of your program to explain the measures you have taken and the parameters you have chosen to achieve your result. Submit your code with your optimal parameters in place so your optimal solution can be demonstrated. Make sure the output from your program does not occupy more than one or two pages. (Note: it is ok to just print the fitness of every 5th or 10th or 20th generation.) The above is to be taken as a guide only. It is advised to do research on GAs and the TSP problem and make any changes you think fit to improve the performance of the GA on the TSP problem. Please provide references if you use techniques found via your research. Your report should contain sufficient description, discussion and analysis, in particular, (1) Details of each step (above) of your implementation and any improvements. (2) The settings, results and performance (graphs) of your GA based on your experiments. (3) Attach a printout of your code. Ensure it is neat, well commented and easy to understand. — Part 2 (Deep Learning, 10 marks) — Aim: This assignment is intended to provide basic experience in using the recently released open source software library TensorFlow developed by Google Brain Team to implement and design simple neural networks for image classification. After having completed this assignment you should know how to realize a linear and convolutional neural network with TensorFlow, understand its training process, and interpret the classification result. CSCI964 - Computational Intelligence - Autumn Session 2018 Page 4 Assignment Specification: 1. Install TensorFlow by following the instruction at <a href="https://www.tensorflow.org/install/" target="_blank" rel="noopener">https://www.tensorflow.org/install/</a>. After that, verify it by following <a href="https://www.tensorflow.org/install/install_mac#ValidateYourInstallation" target="_blank" rel="noopener">https://www.tensorflow.org/install/install_mac#ValidateYourInstallation</a>. 2. (2 marks) Run the simple multinomial logistic regression (a three-layer neural network without a hidden layer) by reading and following <a href="https://www.tensorflow.org/get_started/mnist/beginners" target="_blank" rel="noopener">https://www.tensorflow.org/get_started/mnist/beginners</a>. Ensure that you can obtain the classification accuracy around 92%. Describe what this network does and the key steps (such as defining the networks, training, and test) with your own words. Vary the parameters like the number of training example, the learning rate, and the batch size to observe the classification accuracy. Describe your observation. 3. (3 marks) Run the basic convolutional neural networks (a multi-layer neural network with hidden layers) by reading and following <a href="https://www.tensorflow.org/get_started/mnist/pros" target="_blank" rel="noopener">https://www.tensorflow.org/get_started/mnist/pros</a>. Ensure that you can obtain the classification accuracy around 99%. Describe what this network does and the key steps (such as defining the networks, training, and test) with your own words. Vary the parameters like the patch size and the number of features (defined in [5, 5, 1, 32] and [5, 5, 32, 64]) to observe the classification accuracy. Describe your observation. 4. (5 marks) The following images are from the international competition on cell image classification hosted by International Conference on Pattern Recognition in 2014. The images have been prepartitioned into training set (8701 images), validation set (2175 images), and test set (2720 images), which are provided with this assignment instruction. In addition, a .csv file is enclosed. It contains the category of each image. This file consists of two columns: the first column is the image IDs of all the 13,596 images, and the IDs are consistent with the names of the images in the three sets; and the second column is the category of the cell image. This is an open task. You are expected to use the knowledge learned from this subject to achieve the classification accuracy on the test set as high as possible. Note that you are free to use any classification techniques, toolboxes, software packages, and programming languages to accomplish this task. For your reference, our research shows that the classification accuracy of 96% is achievable. In addition, a journal paper is enclosed in this assignment for your reference. 5. Write a report on each of the three parts (parts 1 and 2 shall be put into one single report). It shall include 1) A brief introduction on the MNIST data set used in part 2; 2) As indicated in the point 2 above, describe what this network does and the key steps (such as defining the networks, training, and test) with your own words. Vary the parameters like the number of training example, the learning rate, and the batch size to observe the classification accuracy. Describe your observation; 3) As indicated in the point 3 above Describe what this network does and the key steps (such as defining the networks, training, and test) with your own words. Vary the parameters like the patch size and the number of features (defined in [5, 5, 1, 32] and [5, 5, 32, 64]) to observe the classification accuracy. Describe your observation; 4) For the open task in point 4 above: a. Describe the classification technique, the toolboxes and the language you use; b. Describe and plot the structure of the classification system with a diagram; c. Describe how you process and prepare the image data when applicable; d. Describe how you chose the parameter of this classification system; e. Describe the training and validation accuracy and plot them when applicable; f. Report the final classification accuracy on the test set; g. Elaborate your observation during the course and provide detailed analysis. Submit: Submit your program on UNIX via the submit command before the deadline and hand in your report with a cover page to in the lecture. For part 1: C/C++ code that is compliable and runnable on the UNIX platform; Before submitting your code check the format to ensure the format and newlines appear correct on UNIX. (Marks will be deducted for untidy or incorrectly formatted work.) To avoid formatting problems avoid using tabs and use 4 spaces instead of tab to indent you code. Make sure your file is named: tsp.cpp. CSCI964 - Computational Intelligence - Autumn Session 2018 Page 5 For part 2: Provide all the source code of your programs for this part (including points 2, 3 and 4). Since you may use programming languages other than C/C++ and other libraries or packages, it is not required that your code be runnable on the UNIX platform. However, you may be asked to demonstrate your program on your laptop or a computer that has all the needed environments. Put both part 1 and part 2 into a single report. Do not write two separated reports. Submit using the submit facility on UNIX ie: $ submit -u login -c CSCI964 -a 3 assignment3.zip where ‘login’ is your UNIX login ID. We will attempt to run your program of part 1 on banshee. If problems are encountered running your program, you may be required to demonstrate your program to the coordinator at a prearranged time. If a request for a demonstration is made and no demonstration is done, a penalty of 2 marks (minimum) will be applied. Marks will be awarded for a comprehensive report, correct program design, implementation, style and performance. Any request for an extension of the submission deadline must be made by applying for academic consideration before the submission deadline. Supporting documentation must accompany the request for any extension. Late assignment submissions without granted extension will be marked but the mark awarded will be reduced by 1 mark for each day late. Assignments will not be accepted if more than one week late.    </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;University of Wollongong School of Computing and Information Technology CSCI464/964 Computational Intelligence Autumn 2018 Assignment 3&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>实现一个聊天系统</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000060/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000060/</id>
    <published>2018-11-04T12:33:29.000Z</published>
    <updated>2018-11-04T13:00:33.417Z</updated>
    
    <content type="html"><![CDATA[<p>Assignment 1 Individual Assignment Due: 5pm Mon 3 September 2018 Introduction You are required to build the server and front end for a chat system.<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>Assignment 1 Individual Assignment Due: 5pm Mon 3 September 2018 Introduction You are required to build the server and front end for a chat system. For assignment 1, chat functionality is not required, you will be building the dashboard for the chat system, and in assignment 2 you will add the chat functionality along with other features. The chat system will allow users to communicate with each other in realtime in different groups and channels. Some users will have admin permission to add users to channels and groups, whilst a super admin has access to the entire site. The solution must be implemented using Node.js, Angular, and sockets. No user authentication is required for assignment 1. Architecture The system will have users which can have the following additional roles: ● Group Admin ● Super Admin A Group Admin has the ability to create groups. A Group Admin also has the ability to create channels within groups. A Group Admin has the ability to create/invite users to a channel (if the user has already been created they will simply be added to the channel). A Group Admin can remove groups, channels, and users from channels. A Group Admin can also allow a user to become a Group Admin of the group. A Super Admin can create users with Group Admin role. A Super Admin can also remove users. A Super Admin can also provide another user with Super Admin role. A Super Admin also has Group Admin role. A user is identified by their username. Initially there is one user called ‘super’ who is also a Super Admin. A user also has an email address (no emails are sent to the email address). The first page of the website requires a user to enter their username, which is remembered in local storage. A user may ‘logout’ which also clears the username out of local storage. Once a user enters their username the page should display the groups they have been added to and the channels for each group. Selecting a channel should display the channel history (which will be empty in assignment 1). A text box should allow for new messages to be sent to the channel. New messages are broadcast to all users currently viewing the channel and added to the history (not required in assignment 1). Data is stored by serialising JavaScript objects into JSON strings and stored in the file system. Git Git must be used during the development of the chat system. We recommend that you use Github and share the repository with your marker. You will be marked on frequent updates to the repository and the usage of git features. Documentation Documentation of your implementation is required. You will need to provide the following: ● Describe the organisation of your Git repository and how you used it during the development of your solution ● Description of data structures used in the client and server to represent the various entities, e.g.: users, groups, channels, etc. ● A description of how you divided the responsibilities between client and server (you are encouraged to have the server provide a REST API which returns JSON in addition to a static directory) ● A list of routes, parameters, return values, and purpose ● Angular architecture: components, services, models, routes    </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Assignment 1 Individual Assignment Due: 5pm Mon 3 September 2018 Introduction You are required to build the server and front end for a chat system.&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Marketing</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000059/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000059/</id>
    <published>2018-11-04T12:32:50.000Z</published>
    <updated>2018-11-04T12:33:17.623Z</updated>
    
    <content type="html"><![CDATA[<p>Introduction to Marketing CCN2003 Semester 1, 2018/19 Individual Assignment Assignment Guidelines Step 1: Read a press release called “Resurgence of Hotel &amp; Dining Membership Undesirable Sales Practices – Be on Alert to Telemarketing Scams” posted on 16 July 2018 by the Consumer Council.<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>Introduction to Marketing CCN2003 Semester 1, 2018/19 Individual Assignment Assignment Guidelines Step 1: Read a press release called “Resurgence of Hotel &amp; Dining Membership Undesirable Sales Practices – Be on Alert to Telemarketing Scams” posted on 16 July 2018 by the Consumer Council. Step 2: Refer the above press release, textbook chapters 1 and 3, lecture notes 1 and 3, and other relevant information. Then, assume you are the marketing manager of Hotel Telemarketing Company Limited which represents several 5-star hotels in Macau to acquire and retain customers to be members of Hotel Membership Club and then answer the following questions:- (1) Analyse what ethical issues in marketing (mix) of Case 1 were complained by the customer as indicated in the above press release. Use the relevant information from the press release to support your analysis. (Also refer to Note on page 4: Ethical issues in marketing mix) Hint: Identify ALL ethics in P. More than 2 Ps can be identified. Then, answer as follows:- Ethics in P? + provide evidence from the case. Ethics in P? + provide evidence from the case. (2) Use any four Customer Value Requirements to elaborate how you would apply each of these requirements to avoid the above identified customer’ complaints (Q1) to be occurred in your company. State clearly which complaints are avoided and it is expected all complaints should be addressed. Student should explain clearly how you would apply each of these 4 customer value requirements to avoid customer complaint(s) (i.e. Ethics in Ps) identified in Q1. All the complaints (i.e. all Ethics in Ps) should be covered in the answer. Student should refer to the textbook/ lecture notes to understand the concepts. e.g. your answer 1 st customer value + explain clearly how you would apply this to avoid customer complaint(s)<em> identified in Q1 in your company. 2 nd customer value + explain clearly how you would apply the factor to avoid customer complaint (s)</em> identified in Q1 in your company. 3 rd customer value + explain clearly how you would apply the factor to avoid customer complaint (s)<em> identified in Q1 in your company. 4 th customer value + explain clearly how you would apply the factor to avoid customer complaint (s)</em> identified in Q1 in your company. (3) Use the two more mature levels of Ethical (Moral Character) Development Model to elaborate how you would apply each of these levels to avoid the above identified customer’ complaints (Q1). State clearly which complaints are avoided and it is expected all complaints should be addressed. Student should explain clearly how you would apply each of these levels to avoid customer complaints (i.e. Ethics in Ps) identified in Q1. All the complaints (i.e. all Ethics in Ps) should be covered in the answer.. Student should refer to the textbook / lecture notes to understand the concepts. e.g. your answer 1st more mature ethical level + a) first point of definition + elaborate how to apply it to avoid customer complaint(s)<em> identified in Q1 in your company; b) second point of definition + elaborate how to apply it to avoid customer complaint(s)</em> identified in Q1 in your company. 2 nd more mature ethical level + a) first point of definition + elaborate how to apply it to avoid customer complaint(s)<em> identified in Q1 in your company; b) second point of definition + elaborate how to apply it to avoid customer complaint(s)</em> identified in Q1 in your company. (4) According to your answer of Question (Q2), design a poster to promote one or more of the four Customer Value Requirements to your company’s customers. Read this question and instructions carefully! *Student can write more than one complaint. Example of how to apply the concept to solve the problem Problem: Department stores usually open until 9 p.m. in Hong Kong so that people cannot shop in the late evening. Question: For the case of Funny Department Store, apply time utility to solve the problem. Answer: Time utility is availability of goods and services when consumers want them. Funny Department Store can consider opening 24 hours a day in Hong Kong in order to make goods available for consumers when they want to purchase. Hence, consumers can make purchase after 9 p.m. every night.     </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Introduction to Marketing CCN2003 Semester 1, 2018/19 Individual Assignment Assignment Guidelines Step 1: Read a press release called “Resurgence of Hotel &amp;amp; Dining Membership Undesirable Sales Practices – Be on Alert to Telemarketing Scams” posted on 16 July 2018 by the Consumer Council.&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>a web applicatio</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000058/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000058/</id>
    <published>2018-11-04T12:31:21.000Z</published>
    <updated>2018-11-04T12:32:44.615Z</updated>
    
    <content type="html"><![CDATA[<p>t #2 CSCI 201 Fall 2018 Assignment #2 CSCI 201 Fall 2018 4.5% of course grade Title Sycamore Calendar, Part 1 Topics Covered HTML CSS Java Servlets AJAX Introduction For this assignment, you will be creating a web application that will allow users to log into their Google Accounts and view their ca<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>Assignment #2 CSCI 201 Fall 2018 Assignment #2 CSCI 201 Fall 2018 4.5% of course grade Title Sycamore Calendar, Part 1 Topics Covered HTML CSS Java Servlets AJAX Introduction For this assignment, you will be creating a web application that will allow users to log into their Google Accounts and view their calendars. Users can also follow other users and view their calendars. This assignment will test your proficiency with HTML and CSS to design the web pages, and use Servlets to connect front-end and back-end code. Instead of handing you a JSON with all the information and a folder of images, you will be using the Google Calendar API to retrieve the information of the users. API Introduction An Application Programming Interface (API) is a set of routines, protocols, and tools for building software applications. More practically, many technology companies create API’s of their software to give developers some access to their technology without having to implement it from scratch. For example, the Google Maps API allows developers to embed Google Maps into their applications. To work with the API in your Java code, you will have to add the appropriate JAR file into your build path. You can download the appropriate files here: <a href="https://developers.google.com/api-clientlibrary/java/apis/calendar/v3" target="_blank" rel="noopener">https://developers.google.com/api-clientlibrary/java/apis/calendar/v3</a>. After downloading the zipped folder, look at the readme.html and add the appropriate JAR files for Servlet Dependencies. Here is some documentation on understanding the API, how to get started, and how to get authorizations and requests from the API: <a href="https://developers.google.com/calendar/concepts/" target="_blank" rel="noopener">https://developers.google.com/calendar/concepts/</a> <a href="https://developers.google.com/calendar/overview" target="_blank" rel="noopener">https://developers.google.com/calendar/overview</a> <a href="https://developers.google.com/calendar/auth#AboutAuthorization" target="_blank" rel="noopener">https://developers.google.com/calendar/auth#AboutAuthorization</a> <a href="https://developers.google.com/api-client-library/java/" target="_blank" rel="noopener">https://developers.google.com/api-client-library/java/</a> Here is some documentation on getting the Google Sign In: <a href="https://developers.google.com/identity/#google-sign-in" target="_blank" rel="noopener">https://developers.google.com/identity/#google-sign-in</a> <a href="https://developers.google.com/identity/sign-in/web/sign-in" target="_blank" rel="noopener">https://developers.google.com/identity/sign-in/web/sign-in</a> Assignment #2 CSCI 201 Fall 2018 And here is some documentation on the Google Calendar API Library: <a href="https://developers.google.com/resources/api-libraries/documentation/calendar/v3/java/latest/" target="_blank" rel="noopener">https://developers.google.com/resources/api-libraries/documentation/calendar/v3/java/latest/</a>. Assignment For this assignment, you are expected to construct some central features of a web app that will allow users to display events from and add events to the user’s Google Calendar. You are required to make four pages for this assignment, a Sign-In Page (Figure 1), Logged in page (Figure 2), profile page (Figure 3), and Home Page in (Figure 4). Your webpages should look reasonably similar in style to the examples shown in the figures. Figure 1: Sign-In Page Assignment #2 CSCI 201 Fall 2018 Figure 2: Logged-in Home Page Figure 3: Profile Page Assignment #2 CSCI 201 Fall 2018 Figure 4: Home Page Sign-In Page: The main page is going to be the sign-in page. Users will have to sign in using a Google Account. This will redirect the users to sign into their Google accounts. Once signed in, redirect the users to their Profile Page in Figure 3. Logged-in Home Page: This page is displayed when users are already signed in and they click on the “Sycamore Calendar” text on the top left corner. When users click on the “Signed in” button, it should sign the users out and lead them to the Sign-In Page in Figure 1. Profile Page: This Profile Page shows the upcoming events in chronological order (earliest on top) from their Google calendar. The image on the right is the profile picture and their full name underneath both taken from their Google account. If the user has no image in their Google account, display an image that says, “No Image”. Home Page: The Home Page displays the user’s profile image and name. It also has a box where users can insert a new event into their calendar. The “Event Title” should take in text, the “Start Date” and “End Date” fields should pop-up a calendar so that the user can click on the date, and the “Start Time” and “End Time” should take in HH:MM. Feel free to use any CSS plugins to help ensure that the user will not input an invalid input. When the user submits a new event, it should be added to the Google calendar. There should also be a page displayed that confirms it was submitted successfully (or displays that there was an error if it was not successful). This page is not shown in the screenshots, so create your own template for it. Assignment #2 CSCI 201 Fall 2018 Clicking on the “Sycamore Calendar” text in the top left corner should redirect the user to the main page on Figure 2. The screenshots above were taken with a resolution of 1440x1024. Make sure that your application performs similarly at that (or a similar) resolution. Notice that the scrollbar in Figure 3 only scrolls the events within the box, and the scroll bar in Figure 4 only scrolls the page in between the top and bottom black blocks. Additional Comments: These are the colors used for the website: • Black: 362f2d • White: ffffff • Grey: 898989 Fonts used: • Calibri font for login page in Figure 1 • American Typewriter font used for the rest The sycamore leaf in the front page is from Google. Feel free to search for the leaf. The Google Sign in page does not have to be identical. There are many styles that google has, so feel free to pick whichever style you prefer. However, make sure the functionalities still work. Grading Criteria Web Design (1.6%) 0.4% - The Sign-In page looks similar in style to the sample 0.4% - The Logged-In page looks similar in style to the sample 0.4% - The Profile page looks similar in style to the sample 0.4% - The Home page looks similar in style to the sample Functionality (2.9%) 0.1% - Clicking the logo on any page returns the user to the home page 0.6% - Users can login and log out their Google account 1.0% - Events display in chronological order (earliest on top) from the user’s Google account 0.7% - Adding an event onto their Google Calendar updates when the Profile page refreshes 0.5% - Outputs an error if the user inputs invalid data when adding an event    </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;t #2 CSCI 201 Fall 2018 Assignment #2 CSCI 201 Fall 2018 4.5% of course grade Title Sycamore Calendar, Part 1 Topics Covered HTML CSS Java Servlets AJAX Introduction For this assignment, you will be creating a web application that will allow users to log into their Google Accounts and view their ca&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>TLS Certificate checking</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000057/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000057/</id>
    <published>2018-11-04T12:30:41.000Z</published>
    <updated>2018-11-04T12:31:16.655Z</updated>
    
    <content type="html"><![CDATA[<p>School of Computing and Information Systems COMP30023: Computer Systems Assignment 2 Due date: No later than 11:59pm on Thursday 24th May 2018 Weight: 15% Project Overview The aim of this project is to increase your awareness and familiarity with TLS Certificate checking. Whilst many applications<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>School of Computing and Information Systems COMP30023: Computer Systems Assignment 2 Due date: No later than 11:59pm on Thursday 24th May 2018 Weight: 15% Project Overview The aim of this project is to increase your awareness and familiarity with TLS Certificate checking. Whilst many applications will perform the certificate checking for you, it is important to understand the underlying process in order to be able to evaluate security. Your task is to write a program that validates TLS certificate files. Your program must be written in C. Submissions that do not compile and run on a NeCTAR instance may receive zero marks. You must write your own certificate validation code using the OpenSSL library. Project Details Your task is to write a C program that reads in a CSV (comma separated value) file that contains two columns. The first column provides the file path for the certificate to test. The second column provides the URL from which that certificate belongs. Your program must step through each line in the CSV file, load the certificate specified in column one, and validate it, including checking the URL contained in column two. The output of your program should be another CSV file, called output.csv. It must contain one line per certificate checked, in the same order as the input CSV file. Each line should contain three columns, the two columns from the input file, and a third column containing either the value 1 if the certificate is valid, or 0 if the certificate is invalid. An example input file is shown below: cert one.cer,<a href="http://www.comp30023test.com" target="_blank" rel="noopener">www.comp30023test.com</a> cert two.cert,game1.onlinegaming.com 1 An example output file is shown below: cert one.cer,<a href="http://www.comp30023test.com,1" target="_blank" rel="noopener">www.comp30023test.com,1</a> cert two.cert,game1.onlinegaming.com,0 The minimum checking you are expected to do is as follows: 1. validation of dates, both the Not Before and Not After dates 2. domain name validation (including Subject Alternative Name (SAN) extension) and wildcards 3. minimum key length of 2048 bits for RSA 4. correct key usage, including extensions Your program must compile to an executable called certcheck and must take one command line argument, which is the relative path to the input CSV file. For example, the following should run your program and check the certificates listed in mytestfile.csv ./certcheck mytestfile.csv You can assume that there are no restrictions on Subject Alternative Name’s beyond the specification, and in particular that wildcard domains are allowed in both the Common Name and the SAN. Your checking code should handle such wildcards correctly. You can assume that all certificates will use RSA keys. Program execution / command line arguments To run your program on your NeCTAR cloud instance prompt: ./certcheck pathToTestFile where: • pathToTestFile is a valid relative path to the test CSV file. Note: Program interface will be strictly enforced, if your program does not comply with the required standard you may get zero marks for part B and C. 2 Submission details Please include your name and login id in a comment at the top of each file. Our plan is to directly harvest your submissions on the due date from your provided GitLab (<a href="https://gitlab.eng.unimelb.edu.au" target="_blank" rel="noopener">https://gitlab.eng.unimelb.edu.au</a>) git account. You must create a repository called comp30023-2018-project-2 in your GitLab account and push your submission to it. You must submit program file(s), including a Makefile. Make sure that your Makefile, header files and source files are added/committed and pushed to your GitLab repository. Do not add/commit object files or executables. Anything you want to mention about your submission, write a text file called README. • If you do not use your Git repository for the project you will NOT have a submission and will be awarded zero marks. • It should be possible to “checkout” the Git repository, then type make clean and then make to produce the executable certcheck. • Late submissions will incur a deduction of 2 marks per day (or part thereof). • If you submit late, you MUST email the lecturer, Chris Culnane <a href="mailto:cculnane@unimelb.edu.au" target="_blank" rel="noopener">cculnane@unimelb.edu.au</a>. Extension policy: If you believe you have a valid reason to require an extension you must contact the lecturer, Chris Culnane <a href="mailto:cculnane@unimelb.edu.au" target="_blank" rel="noopener">cculnane@unimelb.edu.au</a> at the earliest opportunity, which in most instances should be well before the submission deadline. Requests for extensions are not automatic and are considered on a case by case basis. You will be required to supply supporting evidence such as a medical certificate. In addition, your git log file should illustrate the progress made on the project up to the date of your request. Plagiarism policy: You are reminded that all submitted project work in this subject is to be your own individual work. Automated similarity checking software will be used to compare submissions against each other and known public source code. It is University policy that cheating by students in any form is not permitted, and that work submitted for assessment purposes must be the independent work of the student concerned. 3 Using Git is an important step in the verification of authorship. You are encouraged to commit regularly so that you have a record of your work. This is also best practice when using version control software. Assessment Code that does not compile and run on a NeCTAR instance will be awarded zero marks. Your submission will be tested and marked with the following criteria: • Part A Compiles from Git (5 marks) – Code successfully added to your git repository on <a href="https://gitlab.eng.unimelb.edu.au" target="_blank" rel="noopener">https://gitlab.eng.unimelb.edu.au</a> (1 mark) – Make file included (and it works) (1 mark) – Clarity and quality of code – appropriate comments and documentation where necessary (2 marks) – Code correctly implements command line interface (1 mark) • Part B Basic Certificate Checking (5 marks) – Reads input CSV and write output CSV (1 mark) – Correctly validates Not Before date (1 mark) – Correctly validates Not After date (1 mark) – Correctly validates domain name in Common Name (2 mark) • Part C Advanced Certificate Checking (5 marks) – Correctly validates minimum RSA key length of 2048 bits (1 mark) – Correctly validates key usage and constraints (2 mark) ∗ BasicConstraints includes “CA:FALSE” ∗ Enhanced Key Usage includes “TLS Web Server Authentication” – Correctly validates Subject Alternative Name extension (2 marks) 4 Example Code and Development Example source code that opens an X509 certificate and reads some values from it, is available in the Assignment git repository: <a href="https://gitlab.eng.unimelb.edu.au/COMP30023/Assignment2.git" target="_blank" rel="noopener">https://gitlab.eng.unimelb.edu.au/COMP30023/Assignment2.git</a> This will show the basics of opening and reading values from an X509 certificate file using OpenSSL in C. However, this will not provide all the functionality that you require. Part of the exercise is to navigate through the OpenSSL documentation and discover the appropriate methods to call to extract and evaluate the data you need. Please Note: You must write your own validation code, you cannot use the built in OpenSSL certificate validation functions. The documentation is available at: <a href="https://www.openssl.org/docs/manmaster/man3/" target="_blank" rel="noopener">https://www.openssl.org/docs/manmaster/man3/</a> A list of function calls you may not use is as follows: • X509 check ca • X509 check host • X509 cmp current time • X509 cmp time Testing your program Your server will be partially evaluated using automated testing. A sample test script and sample certificates will be provided in the repository: <a href="https://gitlab.eng.unimelb.edu.au/COMP30023/Assignment2.git" target="_blank" rel="noopener">https://gitlab.eng.unimelb.edu.au/COMP30023/Assignment2.git</a> You may use this script to test your program successfully passes the following assessment criteria: • Basic Certificate Checking (5 marks) 5    </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;School of Computing and Information Systems COMP30023: Computer Systems Assignment 2 Due date: No later than 11:59pm on Thursday 24th May 2018 Weight: 15% Project Overview The aim of this project is to increase your awareness and familiarity with TLS Certificate checking. Whilst many applications&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>游戏Inheritance through Real Estate Tycoon</title>
    <link href="http://holydudecs.github.io/2018/11/04/Task000056/"/>
    <id>http://holydudecs.github.io/2018/11/04/Task000056/</id>
    <published>2018-11-04T12:30:09.000Z</published>
    <updated>2018-11-04T12:30:36.187Z</updated>
    
    <content type="html"><![CDATA[<p>ignment 3 Due: Sunday, 13 May 2018, 11:59 PM on TEACH as a .tar Inheritance through Real Estate Tycoon Summary Problem Statement In this program you will create a real estate tycoon game which is turn based (a turn simulating one month). The game will be won if the player reaches a bank account value of $1 million. The player will lose the game if they go bankrupt (have $0). The player starts with a bank account value of $500,000 and no properties. Each turn: • Payments will be paid to outstanding debt and taxes. • Tenants may leave properties if the rent exceeds their ability to pay. • Rent will be<br><a id="more"></a><br>c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写</p><p>Assignment 3 Due: Sunday, 13 May 2018, 11:59 PM on TEACH as a .tar Inheritance through Real Estate Tycoon Summary Problem Statement In this program you will create a real estate tycoon game which is turn based (a turn simulating one month). The game will be won if the player reaches a bank account value of $1 million. The player will lose the game if they go bankrupt (have $0). The player starts with a bank account value of $500,000 and no properties. Each turn: • Payments will be paid to outstanding debt and taxes. • Tenants may leave properties if the rent exceeds their ability to pay. • Rent will be collected from rent producing properties which have tenants. • A random event will occur. Random events include: o Weather: hurricane, tornado, earthquake, wildfire. o Stock market crash. o Gentrification: big business moves to town, natural resource discovered, positive press about the city. • A listing of properties with potential to purchase a property. • The ability to sell a property. • The ability to raise or lower rents on a property. Each property has the following attributes: • Property value • Location • Mortgage • Property tax: fixed at 1.5% • Tenant(s) The types of properties are: • House: can be rented by one tenant • Apartment Complex: can collect rent on each apartment in the complex at the same rate • Business Complex: has spaces of various sizes and rent values, can have multiple tenants Implementation Details Set Up The game will start with three of each property type. Each one will be randomly assigned a location (United States: SE, NE, Midwest, SW, and NW), randomly assigned a property value (House &gt;=100,000; Apartment Complex &gt;= 300,000; Business Complex &gt;= 400,000; all starting property values are capped at 600,000), a mortgage which includes a randomly assigned monthly (turn) price (not to exceed 5000) and a calculated duration of mortgage based on the monthly price (exclude interest). The property tax for all properties will be fixed at 1.5% of the property value. Property taxes will be assessed every twelve months (turns). Apartment complexes will have a random number of rooms assigned to them (max 10). Business complexes will have a random number of spaces (max 5) assigned with a random size attached to each space (small, medium, or large). Properties will have tenants in each building. The tenants may be citizens or businesses. Both will have a max, randomly assigned monthly budget which is fixed through out the game (500 to 5000 for citizens, 2000 to 10000 for businesses). Both will also have a randomly assigned agreeability score ranging from 1 to 5 (1 being not agreeable and 5 being incredibly agreeable) which will be fixed throughout the game. Citizens may occupy houses and apartments, businesses may only occupy business complexes. Each business that pays rent in a complex increases the property value by 1% each turn. The player will begin with a bank account of $500,000 and no properties. Playing the Game The goal of the game is to make money, but to make money, some money must be spent. The turn will begin by first collecting the monthly rent from the appropriate properties, adding this amount to the bank. If rent was set higher on the last turn than what a tenant’s monthly budget is, then this turn they will leave the property and not pay rent. Tenants cannot be replaced in this game once they leave. The room they vacate will be left empty. If a tenant’s agreeability score is less than 2 and the rent is higher than their monthly budget, they will refuse to pay rent but will stay in the property. In this game, the player can not evict tenants, the only way to collect rent on disagreeable tenants is to lower the rent. The monthly mortgage payments will then be made for the appropriate properties, subtracting this amount from the bank. Every twelve turns, property tax will be paid, subtracting this amount from the bank. The property tax is 1.5% of the current value of the property. A random event will then occur. The following effects will occur for all properties that meet the requirements: • A hurricane occurs, impacting properties in the SE by decreasing their property value by 50%. • A tornado occurs, impacting properties in the Midwest by decreasing their property value by 30%. • The earthquake occurs, impacting properties in the Northwest by decreasing their property value to 10%. • A wildfire occurs, impacting properties in the Southwest by decreasing their property value by 25%. • Stock market crash: all properties decrease in value by 30%. • Gentrification (big business moves to town, natural resource discovered, positive press about the city): a random location is selected, all properties in that location see and increase in property value of 20%. After the random event, the player will be given the option to buy a property, sell a property, or adjust rents on a property. If the player chooses to buy a property, three random properties should be pulled from the arrays of properties set up at the beginning of the game. If all of those properties have been bought, new ones should be generated into the array. The property will be added to the player’s list of properties of that type and removed from the general arrays. The mortgage on the property will begin being collected the next turn and will continue until the property is paid off. If the player chooses to sell a property, the player will select which property they wish to sell and at what price. Properties can only be sold if there are no tenants on the property. A random number from 1 to 3 will be selected to determine if the player will get their asking price (3), get the property value (2) or get 10% less than the property value (1). The amount received will be added to the bank account. If the player chooses to adjust rents, they must select which property and specify what the new rent will be. For business complexes, the player can select a specific space in the property to adjust the rent on. Ending the Game Play will continue until the bank account is 0 or 1,000,000. Requirements • The program must run to the above specified requirements in their entirety. • A readable and understandable user interface must be present. • Classes must be used. • Inheritance must be used, demonstrating the use of base and child classes. • Appropriate use of the Big 3. • Files must be separated. • A functioning Makefile must be provided. • No memory leaks. • No functions greater than 20 lines. • No use of libraries that have not been permitted in the course (namely and ) • Lack of correct coding style will incur an automatic 10 point deduction.    </p><p>留学生作业代写,cs作业代写,cs代写,作业代写,北美cs作业代写,澳洲cs作业代写,加拿大cs作业代写,cs作业代写价格,靠谱cs作业代写,程序代写<br><img src="images/wechat.jpeg" alt="WeChat"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ignment 3 Due: Sunday, 13 May 2018, 11:59 PM on TEACH as a .tar Inheritance through Real Estate Tycoon Summary Problem Statement In this program you will create a real estate tycoon game which is turn based (a turn simulating one month). The game will be won if the player reaches a bank account value of $1 million. The player will lose the game if they go bankrupt (have $0). The player starts with a bank account value of $500,000 and no properties. Each turn: • Payments will be paid to outstanding debt and taxes. • Tenants may leave properties if the rent exceeds their ability to pay. • Rent will be&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++代写,java代写,python代写,matlab代写,作业代写,留学生作业代写" scheme="http://holydudecs.github.io/tags/c-c-%E4%BB%A3%E5%86%99-java%E4%BB%A3%E5%86%99-python%E4%BB%A3%E5%86%99-matlab%E4%BB%A3%E5%86%99-%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99-%E7%95%99%E5%AD%A6%E7%94%9F%E4%BD%9C%E4%B8%9A%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
</feed>
